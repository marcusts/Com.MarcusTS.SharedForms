<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Com.MarcusTS.SharedForms</name>
    </assembly>
    <members>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Marked parameter should be evaluated to true.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Marked parameter should be evaluated to false.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Marked parameter should be evaluated to null value.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Marked parameter should be evaluated to not null value.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.CollectionAccessType">
            <summary>
            Enum CollectionAccessType
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.CollectionAccessType.None">
            <summary>
            Method does not use or modify content of the collection.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.CollectionAccessType.Read">
            <summary>
            Method only reads content of the collection but does not modify it.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>
            Method can change content of the collection but does not add new elements.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.CollectionAccessType.UpdatedContent">
            <summary>
            Method can add new elements to the collection.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags">
            <summary>
            Enum ImplicitUseKindFlags
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags.Itself">
            <summary>
            The itself
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspChildControlTypeAttribute">
            <summary>
            Class AspChildControlTypeAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspChildControlTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspChildControlTypeAttribute" /> class.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <param name="controlType">Type of the control.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspChildControlTypeAttribute.ControlType">
            <summary>
            Gets the type of the control.
            </summary>
            <value>The type of the control.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspChildControlTypeAttribute.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspDataFieldAttribute">
            <summary>
            Class AspDataFieldAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspDataFieldsAttribute">
            <summary>
            Class AspDataFieldsAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMethodPropertyAttribute">
            <summary>
            Class AspMethodPropertyAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcActionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcActionAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcActionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcActionAttribute" /> class.
            </summary>
            <param name="anonymousProperty">The anonymous property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcActionAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
            <value>The anonymous property.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
              <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
            ViewBag.ReturnUrl = Url.Action("Foo"); // OK
            return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaAttribute" /> class.
            </summary>
            <param name="anonymousProperty">The anonymous property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
            <value>The anonymous property.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaMasterLocationFormatAttribute">
            <summary>
            Class AspMvcAreaMasterLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaMasterLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaMasterLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaMasterLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaPartialViewLocationFormatAttribute">
            <summary>
            Class AspMvcAreaPartialViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaPartialViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaViewLocationFormatAttribute">
            <summary>
            Class AspMvcAreaViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcAreaViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcControllerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcControllerAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcControllerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcControllerAttribute" /> class.
            </summary>
            <param name="anonymousProperty">The anonymous property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcControllerAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
            <value>The anonymous property.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcMasterLocationFormatAttribute">
            <summary>
            Class AspMvcMasterLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcMasterLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcMasterLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcMasterLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcPartialViewLocationFormatAttribute">
            <summary>
            Class AspMvcPartialViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcPartialViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcPartialViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcPartialViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspMvcViewLocationFormatAttribute">
            <summary>
            Class AspMvcViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspMvcViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspMvcViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspMvcViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspRequiredAttributeAttribute">
            <summary>
            Class AspRequiredAttributeAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspRequiredAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspRequiredAttributeAttribute" /> class.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspRequiredAttributeAttribute.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AspTypePropertyAttribute">
            <summary>
            Class AspTypePropertyAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AspTypePropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AspTypePropertyAttribute" /> class.
            </summary>
            <param name="createConstructorReferences">if set to <c>true</c> [create constructor references].</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AspTypePropertyAttribute.CreateConstructorReferences">
            <summary>
            Gets a value indicating whether [create constructor references].
            </summary>
            <value><c>true</c> if [create constructor references]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Com.MarcusTS.SharedForms.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
            the attribute is the assertion type.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.AssertionConditionAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.AssertionConditionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.AssertionConditionAttribute" /> class.
            </summary>
            <param name="conditionType">Type of the condition.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets the type of the condition.
            </summary>
            <value>The type of the condition.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:Com.MarcusTS.SharedForms.Annotations.AssertionConditionAttribute" /> attribute.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
              <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.BaseTypeRequiredAttribute" /> class.
            </summary>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.BaseTypeRequiredAttribute.BaseType">
            <summary>
            Gets the type of the base.
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
              <code>
            [CanBeNull] object Test() =&gt; null;
            void UseTest() {
            var p = Test();
            var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
              <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
            void Test() {
            var ca1 = new NoEquality();
            var ca2 = new NoEquality();
            if (ca1 != null) { // OK
            bool condition = ca1 == ca2; // Warning
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.CollectionAccessAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.CollectionAccessType)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.CollectionAccessAttribute" /> class.
            </summary>
            <param name="collectionAccessType">Type of the collection access.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.CollectionAccessAttribute.CollectionAccessType">
            <summary>
            Gets the type of the collection access.
            </summary>
            <value>The type of the collection access.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <syntax>
              <p>Function Definition Table syntax:</p>
              <list>
                <item>FDT      ::= FDTRow [;FDTRow]*</item>
                <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                <item>Input    ::= ParameterName: Value [, Input]*</item>
                <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                <item>Value    ::= true | false | null | notnull | canbenull</item>
              </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br />
            Value <c>canbenull</c> is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br /></syntax>
            <examples>
              <list>
                <item>
                  <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                </item>
                <item>
                  <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                </item>
              </list>
            </examples>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute" /> class.
            </summary>
            <param name="contract">The contract.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute" /> class.
            </summary>
            <param name="contract">The contract.</param>
            <param name="forceFullStates">if set to <c>true</c> [force full states].</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute.Contract">
            <summary>
            Gets the contract.
            </summary>
            <value>The contract.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.ContractAnnotationAttribute.ForceFullStates">
            <summary>
            Gets a value indicating whether [force full states].
            </summary>
            <value><c>true</c> if [force full states]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.HtmlAttributeValueAttribute">
            <summary>
            Class HtmlAttributeValueAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.HtmlAttributeValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.HtmlAttributeValueAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.HtmlAttributeValueAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.HtmlElementAttributesAttribute">
            <summary>
            Class HtmlElementAttributesAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.HtmlElementAttributesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.HtmlElementAttributesAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.HtmlElementAttributesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.HtmlElementAttributesAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.HtmlElementAttributesAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
              <code>
            void Foo(string param) {
            if (param == null)
            throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
              <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
            string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute" /> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether this <see cref="T:Com.MarcusTS.SharedForms.Annotations.LocalizationRequiredAttribute" /> is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:Com.MarcusTS.SharedForms.Annotations.SourceTemplateAttribute">source template</see>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
            foreach (var item in collection) {
            //$ $END$
            }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
            /*$ var $x$Id = "$newguid$" + x.ToString();
            x.DoSomething($x$Id); */
            }
            </code></example>
            <remarks>You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:Com.MarcusTS.SharedForms.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:Com.MarcusTS.SharedForms.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
            for the parameter, set the <see cref="P:Com.MarcusTS.SharedForms.Annotations.MacroAttribute.Editable" /> property value = -1.</remarks>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <value>The editable.</value>
            &gt;
            <remarks>If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values &gt;= 0. To make the parameter non-editable when the template is expanded, use -1.</remarks>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:Com.MarcusTS.SharedForms.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:Com.MarcusTS.SharedForms.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:Com.MarcusTS.SharedForms.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags,Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets the target flags.
            </summary>
            <value>The target flags.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.MeansImplicitUseAttribute.UseKindFlags">
            <summary>
            Gets the use kind flags.
            </summary>
            <value>The use kind flags.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.MustUseReturnValueAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MustUseReturnValueAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.MustUseReturnValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MustUseReturnValueAttribute" /> class.
            </summary>
            <param name="justification">The justification.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.MustUseReturnValueAttribute.Justification">
            <summary>
            Gets the justification.
            </summary>
            <value>The justification.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>The attribute must be mentioned in your member reordering patterns</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the method is contained in a type that implements
            <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
            is used to notify that some property value changed.
            </summary>
            <example>
              <code>
            public class Foo : INotifyPropertyChanged {
            public event PropertyChangedEventHandler PropertyChanged;
            [NotifyPropertyChangedInvocator]
            protected virtual void NotifyChanged(string propertyName) { ... }
            string _name;
            public string Name {
            get { return _name; }
            set { _name = value; NotifyChanged("LastName"); /* Warning */ }
            }
            }
            </code>
            Examples of generated notifications:
            <list><item><c>NotifyChanged("Property")</c></item><item><c>NotifyChanged(() =&gt; Property)</c></item><item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item><item><c>SetProperty(ref myField, value, "Property")</c></item></list></example>
            <seealso cref="T:System.Attribute" />
            <remarks>The method should be non-static and conform to one of the supported signatures:
            <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.NotifyPropertyChangedInvocatorAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.NotifyPropertyChangedInvocatorAttribute" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.NotifyPropertyChangedInvocatorAttribute.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
              <code>
            [NotNull] object Foo() {
            return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.PathReferenceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.PathReferenceAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.PathReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.PathReferenceAttribute" /> class.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.PathReferenceAttribute.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>The base path.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
              <code>
            class Foo {
            [ProvidesContext] IBarService _barService = ...;
            void ProcessNode(INode node) {
            DoSomething(node, node.GetGlobalServices().Bar);
            //              ^ Warning: use value of '_barService' field
            }
            }
            </code>
            </example>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.PublicAPIAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.PublicAPIAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.PublicAPIAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.PublicAPIAttribute" /> class.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.PublicAPIAttribute.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
              <code>
            [Pure] int Multiply(int x, int y) =&gt; x * y;
            void M() {
            Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorDirectiveAttribute">
            <summary>
            Class RazorDirectiveAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.RazorDirectiveAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.RazorDirectiveAttribute" /> class.
            </summary>
            <param name="directive">The directive.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.RazorDirectiveAttribute.Directive">
            <summary>
            Gets the directive.
            </summary>
            <value>The directive.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorHelperCommonAttribute">
            <summary>
            Class RazorHelperCommonAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorImportNamespaceAttribute">
            <summary>
            Class RazorImportNamespaceAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.RazorImportNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.RazorImportNamespaceAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.RazorImportNamespaceAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorInjectionAttribute">
            <summary>
            Class RazorInjectionAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.RazorInjectionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.RazorInjectionAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.RazorInjectionAttribute.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.RazorInjectionAttribute.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorLayoutAttribute">
            <summary>
            Class RazorLayoutAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute">
            <summary>
            Class RazorPageBaseTypeAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute" /> class.
            </summary>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute" /> class.
            </summary>
            <param name="baseType">Type of the base.</param>
            <param name="pageName">Name of the page.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute.BaseType">
            <summary>
            Gets the type of the base.
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.RazorPageBaseTypeAttribute.PageName">
            <summary>
            Gets the name of the page.
            </summary>
            <value>The name of the page.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorWriteLiteralMethodAttribute">
            <summary>
            Class RazorWriteLiteralMethodAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorWriteMethodAttribute">
            <summary>
            Class RazorWriteMethodAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RazorWriteMethodParameterAttribute">
            <summary>
            Class RazorWriteMethodParameterAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
            foreach (var x in xs) {
            //$ $END$
            }
            }
            </code></example>
            <remarks>Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:Com.MarcusTS.SharedForms.Annotations.MacroAttribute" /> attribute to specify macros for parameters.</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
              <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            void Foo() {
            ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.StringFormatMethodAttribute" /> class.
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets the name of the format parameter.
            </summary>
            <value>The name of the format parameter.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute.#ctor(Com.MarcusTS.SharedForms.Annotations.ImplicitUseKindFlags,Com.MarcusTS.SharedForms.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets the target flags.
            </summary>
            <value>The target flags.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.UsedImplicitlyAttribute.UseKindFlags">
            <summary>
            Gets the use kind flags.
            </summary>
            <value>The use kind flags.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Annotations.ValueProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Annotations.ValueProviderAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Annotations.ValueProviderAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
            <remarks>Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Com.MarcusTS.SharedForms.Annotations.XamlItemsControlAttribute" /> attribute.</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior">
            <summary>
            Can pass in an illegal character filter. Also, to be valid, the two strings *must* match. Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior._compareEntry">
            <summary>
            The compare entry
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior.#ctor(System.Action,System.Func{Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
            <param name="illegalCharFilter">The illegal character filter.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior.CompareEntry">
            <summary>
            Gets or sets the compare entry.
            </summary>
            <value>The compare entry.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior.IsWholeEntryValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is whole entry valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is whole entry valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior.CompareEntryOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Compares the entry on property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyChangedEventArgs">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ComparisonEntryValidatorBehavior.ValidateCompareEntry(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Validates the compare entry.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="str">The string.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior">
            <summary>
            Interface IEditorValidationBehavior
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid" />
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior.OriginalText">
            <summary>
            Gets or sets the original text.
            </summary>
            <value>The original text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior.TextMustChange">
            <summary>
            Gets or sets a value indicating whether [text must change].
            </summary>
            <value><c>true</c> if [text must change]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior">
            <summary>
            Class EditorValidationBehavior.
            Implements the <see cref="!:Xamarin.Forms.Behavior&lt;Xamarin.Forms.Editor&gt;" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior" />
            </summary>
            <seealso cref="!:Xamarin.Forms.Behavior&lt;Xamarin.Forms.Editor&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior._onIsValidChangedAction">
            <summary>
            The on is valid changed action
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior._editor">
            <summary>
            The editor
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior._ignoreTextChanged">
            <summary>
            The ignore text changed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior._isValid">
            <summary>
            The is valid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior._lastAssignedText">
            <summary>
            The last assigned text
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.DoNotForceMaskInitially">
            <summary>
            Gets or sets a value indicating whether [do not force mask initially].
            </summary>
            <value><c>true</c> if [do not force mask initially]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.IsFocused">
            <summary>
            Gets a value indicating whether this instance is focused.
            </summary>
            <value><c>true</c> if this instance is focused; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.IsValidChanged">
            <summary>
            Occurs when [is valid changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.IsValid">
            <summary>
            Returns true if ... is valid.
            </summary>
            <value><c>null</c> if [is valid] contains no value, <c>true</c> if [is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.LastValidationError">
            <summary>
            Gets or sets the last validation error.
            </summary>
            <value>The last validation error.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.OriginalText">
            <summary>
            Gets or sets the original text.
            </summary>
            <value>The original text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.TextMustChange">
            <summary>
            Gets or sets a value indicating whether [text must change].
            </summary>
            <value><c>true</c> if [text must change]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.Revalidate">
            <summary>
            Revalidates this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.MinAnMaxLengthValidator(Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior,System.String)">
            <summary>
            Minimums an maximum length validator.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.IsEditTextValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior,System.String)">
            <summary>
            Determines whether [is edit text valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is edit text valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.IsLongerThanMaxLength(Com.MarcusTS.SharedForms.Common.Behaviors.IEditorValidationBehavior,System.String)">
            <summary>
            Determines whether [is longer than maximum length] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <returns><c>true</c> if [is longer than maximum length] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.OnAttachedTo(Xamarin.Forms.Editor)">
            <summary>
            Called when [attached to].
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.OnDetachingFrom(Xamarin.Forms.Editor)">
            <summary>
            Calls the <see cref="M:Xamarin.Forms.Behavior`1.OnDetachingFrom(`0)" /> method and then detaches from the superclass.
            </summary>
            <param name="bindable">The bindable object from which the behavior was detached.</param>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.OnFocused(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Handles the <see cref="E:Focused" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.OnTextChanged(System.Object,Xamarin.Forms.TextChangedEventArgs)">
            <summary>
            Handles the <see cref="E:TextChanged" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.TextChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.OnUnfocused(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Handles the <see cref="E:Unfocused" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EditorValidationBehavior.ValidateText(System.String,System.String)">
            <summary>
            Validates the text.
            </summary>
            <param name="newText">The new text.</param>
            <param name="oldText">The old text.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior">
            <summary>
            Class EmailEntryValidatorBehavior. Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior.AT_SIGN">
            <summary>
            At sign
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior.REG_EX_VALID_CHARS">
            <summary>
            The reg ex valid chars
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior.IllegalCharFilter(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.String,System.Boolean@)">
            <summary>
            Illegals the character filter.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <param name="originalText">The original text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior.IsWholeEntryValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is whole entry valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is whole entry valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EmailEntryValidatorBehavior.EmailIllegalCharFunc(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.Boolean@)">
            <summary>
            Emails the illegal character function.
            </summary>
            <param name="behaviorBase">The behavior base.</param>
            <param name="newText">The new text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.ValidationTypes">
            <summary>
            Enum ValidationTypes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ValidationTypes.AnyText">
            <summary>
            Any text
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ValidationTypes.WholeNumber">
            <summary>
            The whole number
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ValidationTypes.DecimalNumber">
            <summary>
            The decimal number
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps">
            <summary>
            Interface ICommonValidationProps
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps.DoNotForceMaskInitially">
            <summary>
            Gets or sets a value indicating whether [do not force mask initially].
            </summary>
            <value><c>true</c> if [do not force mask initially]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps.Mask">
            <summary>
            Gets or sets the mask.
            </summary>
            <value>The mask.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps.ValidationType">
            <summary>
            Gets or sets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior">
            <summary>
            Interface IEntryValidationBehavior
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid" />
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.ICommonValidationProps" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior.OriginalText">
            <summary>
            Gets or sets the original text.
            </summary>
            <value>The original text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior.TextMustChange">
            <summary>
            Gets or sets a value indicating whether [text must change].
            </summary>
            <value><c>true</c> if [text must change]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior.UnmaskedText">
            <summary>
            Gets the unmasked text.
            </summary>
            <value>The unmasked text.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior.PrepareTextForEditing(System.String,System.Boolean)">
            <summary>
            Prepares the text for editing.
            </summary>
            <param name="entryText">The entry text.</param>
            <param name="firstFocused">if set to <c>true</c> [first focused].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior.StripMaskFromText(System.String)">
            <summary>
            Strips the mask from text.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior">
            <summary>
            Class EntryValidationBehavior.
            Implements the <see cref="!:Xamarin.Forms.Behavior&lt;Xamarin.Forms.Entry&gt;" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior" />
            </summary>
            <seealso cref="!:Xamarin.Forms.Behavior&lt;Xamarin.Forms.Entry&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.X_CHAR">
            <summary>
            The x character
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._onIsValidChangedAction">
            <summary>
            The on is valid changed action
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._entry">
            <summary>
            The entry
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._ignoreTextChanged">
            <summary>
            The ignore text changed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._isValid">
            <summary>
            The is valid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._lastAssignedText">
            <summary>
            The last assigned text
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._mask">
            <summary>
            The mask
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior._maskPositions">
            <summary>
            The mask positions
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.IsFocused">
            <summary>
            Gets a value indicating whether this instance is focused.
            </summary>
            <value><c>true</c> if this instance is focused; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.IsValidChanged">
            <summary>
            Occurs when [is valid changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.DoNotForceMaskInitially">
            <summary>
            Gets or sets a value indicating whether [do not force mask initially].
            </summary>
            <value><c>true</c> if [do not force mask initially]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.LastValidationError">
            <summary>
            Gets or sets the last validation error.
            </summary>
            <value>The last validation error.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.Mask">
            <summary>
            Gets or sets the mask.
            </summary>
            <value>The mask.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.OriginalText">
            <summary>
            Gets or sets the original text.
            </summary>
            <value>The original text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.TextMustChange">
            <summary>
            Gets or sets a value indicating whether [text must change].
            </summary>
            <value><c>true</c> if [text must change]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.UnmaskedText">
            <summary>
            Gets the unmasked text.
            </summary>
            <value>The unmasked text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.ValidationType">
            <summary>
            Gets or sets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.PrepareTextForEditing(System.String,System.Boolean)">
            <summary>
            Prepares the text for editing.
            </summary>
            <param name="entryText">The entry text.</param>
            <param name="firstFocused">if set to <c>true</c> [first focused].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.Revalidate">
            <summary>
            Revalidates this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.StripMaskFromText(System.String)">
            <summary>
            Strips the mask from text.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.MinAnMaxLengthValidator(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Minimums an maximum length validator.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.FormatDepartingText(System.String)">
            <summary>
            Formats the departing text.
            </summary>
            <param name="entryText">The entry text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.IllegalCharFilter(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.String,System.Boolean@)">
            <summary>
            Illegals the character filter.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <param name="originalText">The original text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.IsLongerThanMaxLength(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is longer than maximum length] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <returns><c>true</c> if [is longer than maximum length] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.IsWholeEntryValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is whole entry valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is whole entry valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.OnAttachedTo(Xamarin.Forms.Entry)">
            <summary>
            Called when [attached to].
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.OnDetachingFrom(Xamarin.Forms.Entry)">
            <summary>
            Calls the <see cref="M:Xamarin.Forms.Behavior`1.OnDetachingFrom(`0)" /> method and then detaches from the superclass.
            </summary>
            <param name="bindable">The bindable object from which the behavior was detached.</param>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.OnFocused(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Handles the <see cref="E:Focused" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.OnTextChanged(System.Object,Xamarin.Forms.TextChangedEventArgs)">
            <summary>
            Handles the <see cref="E:TextChanged" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.TextChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.OnUnfocused(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Handles the <see cref="E:Unfocused" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.CreateMaskPositions">
            <summary>
            Creates the mask positions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.SetUnmaskedText">
            <summary>
            Sets the unmasked text.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior.ValidateText(System.String,System.String)">
            <summary>
            Validates the text.
            </summary>
            <param name="newText">The new text.</param>
            <param name="oldText">The old text.</param>
            <remarks>All stripping is repeated ere for safety</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes">
            <summary>
            Enum NumericTypes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.NoNumericType">
            <summary>
            The no numeric type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.DoubleNumericType">
            <summary>
            The double numeric type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.NullableDoubleNumericType">
            <summary>
            The nullable double numeric type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.IntNumericType">
            <summary>
            The int numeric type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.NullableIntNumericType">
            <summary>
            The nullable int numeric type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.LongNumericType">
            <summary>
            The long numeric type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericTypes.NullableLongNumericType">
            <summary>
            The nullable long numeric type
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.IHaveMinAndMaxNumbers">
            <summary>
            Interface IHaveMinAndMaxNumbers
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IHaveMinAndMaxNumbers.MaxDecimalNumber">
            <summary>
            Gets or sets the maximum decimal number.
            </summary>
            <value>The maximum decimal number.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IHaveMinAndMaxNumbers.MinDecimalNumber">
            <summary>
            Gets or sets the minimum decimal number.
            </summary>
            <value>The minimum decimal number.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IHaveMinAndMaxNumbers.NumericType">
            <summary>
            Gets or sets the type of the numeric.
            </summary>
            <value>The type of the numeric.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.INumericEntryValidationBehavior">
            <summary>
            Interface INumericEntryValidationBehavior
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IHaveMinAndMaxNumbers" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IHaveMinAndMaxNumbers" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.INumericEntryValidationBehavior.CharsToRightOfDecimal">
            <summary>
            Gets or sets the chars to right of decimal.
            </summary>
            <value>The chars to right of decimal.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.INumericEntryValidationBehavior.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior">
            <summary>
            Class NumericEntryValidationBehavior.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.INumericEntryValidationBehavior" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.INumericEntryValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.FAIL_TEXT">
            <summary>
            The fail text
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.CharsToRightOfDecimal">
            <summary>
            Gets or sets the chars to right of decimal.
            </summary>
            <value>The chars to right of decimal.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.MaxDecimalNumber">
            <summary>
            Gets or sets the maximum decimal number.
            </summary>
            <value>The maximum decimal number.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.MinDecimalNumber">
            <summary>
            Gets or sets the minimum decimal number.
            </summary>
            <value>The minimum decimal number.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.NumericType">
            <summary>
            Gets or sets the type of the numeric.
            </summary>
            <value>The type of the numeric.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.PrepareTextForEditing(System.String,System.Boolean)">
            <summary>
            Prepares the text for editing.
            </summary>
            <param name="entryText">The entry text.</param>
            <param name="firstFocused">if set to <c>true</c> [first focused].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.StripStringFormatCharacters(System.String,System.String,Com.MarcusTS.SharedForms.Common.Behaviors.ValidationTypes,System.Int32,System.Boolean)">
            <summary>
            This method must also *restore* a decimal and trailing zeroes when first focused.
            </summary>
            <param name="entryText">The entry text.</param>
            <param name="stringFormat">The string format.</param>
            <param name="validationType">Type of the validation.</param>
            <param name="charsToRight">The chars to right.</param>
            <param name="firstFocused">if set to <c>true</c> [first focused].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.FormatDepartingText(System.String)">
            <summary>
            Formats the departing text.
            </summary>
            <param name="entryText">The entry text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.IllegalCharFilter(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.String,System.Boolean@)">
            <summary>
            Illegals the character filter.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <param name="originalText">The original text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
            <remarks>We can only evaluate the unmasked text (otherwise all of our tests fail).</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.NumericEntryValidationBehavior.IsWholeEntryValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is whole entry valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is whole entry valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior">
            <summary>
            Class PhoneEntryValidatorBehavior. Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior.REG_EX_VALID_CHARS">
            <summary>
            The reg ex valid chars
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior.IllegalCharFilter(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.String,System.Boolean@)">
            <summary>
            Illegals the character filter.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <param name="originalText">The original text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior.IsWholeEntryValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is whole entry valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is whole entry valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.PhoneEntryValidatorBehavior.PhoneNumberIllegalCharFunc(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.Boolean@)">
            <summary>
            Phones the number illegal character function.
            </summary>
            <param name="behaviorBase">The behavior base.</param>
            <param name="newText">The new text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior">
            <summary>
            Class UserNameEntryValidatorBehavior.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.EntryValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior.MAX_USER_NAME_LEN">
            <summary>
            The maximum user name length
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior.REG_EX_VALID_CHARS">
            <summary>
            The reg ex valid chars
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior" /> class.
            </summary>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior.IllegalCharFilter(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.String,System.Boolean@)">
            <summary>
            Illegals the character filter.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newText">The new text.</param>
            <param name="originalText">The original text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior.IsWholeEntryValid(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String)">
            <summary>
            Determines whether [is whole entry valid] [the specified behavior].
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="currentText">The current text.</param>
            <returns><c>true</c> if [is whole entry valid] [the specified behavior]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.UserNameEntryValidatorBehavior.UserNameIllegalCharFunc(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior,System.String,System.Boolean@)">
            <summary>
            Users the name illegal character function.
            </summary>
            <param name="behaviorBase">The behavior base.</param>
            <param name="newText">The new text.</param>
            <param name="isOutsideOfRange">if set to <c>true</c> [is outside of range].</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.IViewValidationBehavior">
            <summary>
            Interface IViewValidationBehavior
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid" />
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IViewValidationBehavior.EmptyAllowed">
            <summary>
            Gets or sets a value indicating whether [empty allowed].
            </summary>
            <value><c>true</c> if [empty allowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.IViewValidationBehavior.IsNumeric">
            <summary>
            Gets or sets a value indicating whether this instance is numeric.
            </summary>
            <value><c>true</c> if this instance is numeric; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior">
            <summary>
            Class ViewValidationBehavior.
            Implements the <see cref="!:Xamarin.Forms.Behavior&lt;Xamarin.Forms.View&gt;" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IViewValidationBehavior" />
            </summary>
            <seealso cref="!:Xamarin.Forms.Behavior&lt;Xamarin.Forms.View&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.IViewValidationBehavior" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior._getValueFromViewFunc">
            <summary>
            The get value from view function
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior._isNumeric">
            <summary>
            The is numeric
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior._onIsValidChangedAction">
            <summary>
            The on is valid changed action
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior._emptyAllowed">
            <summary>
            The empty allowed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior._isValid">
            <summary>
            The is valid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior._view">
            <summary>
            The view
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.#ctor(System.Func{Xamarin.Forms.View,System.Object},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior" /> class.
            </summary>
            <param name="getValueFromViewFunc">The get value from view function.</param>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.IsFocused">
            <summary>
            Gets a value indicating whether this instance is focused.
            </summary>
            <value><c>true</c> if this instance is focused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.Validator">
            <summary>
            Gets or sets the validator.
            </summary>
            <value>The validator.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.IsValidChanged">
            <summary>
            Occurs when [is valid changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.EmptyAllowed">
            <summary>
            Gets or sets a value indicating whether [empty allowed].
            </summary>
            <value><c>true</c> if [empty allowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.IsNumeric">
            <summary>
            Gets or sets a value indicating whether this instance is numeric.
            </summary>
            <value><c>true</c> if this instance is numeric; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.LastValidationError">
            <summary>
            Gets or sets the last validation error.
            </summary>
            <value>The last validation error.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.Revalidate">
            <summary>
            Revalidates this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.DefaultValidator(Com.MarcusTS.SharedForms.Common.Behaviors.IViewValidationBehavior,System.Object)">
            <summary>
            Defaults the validator.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="o">The o.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.OnAttachedTo(Xamarin.Forms.View)">
            <summary>
            Called when [attached to].
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.OnDetachingFrom(Xamarin.Forms.View)">
            <summary>
            Calls the <see cref="M:Xamarin.Forms.Behavior`1.OnDetachingFrom(`0)" /> method and then detaches from the superclass.
            </summary>
            <param name="bindable">The bindable object from which the behavior was detached.</param>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.OnFocused(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Handles the <see cref="E:Focused" /> event.
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.OnUnfocused(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Handles the <see cref="E:Unfocused" /> event.
            </summary>
            <param name="o">The o.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Behaviors.ViewValidationBehavior.IsANumberGreaterThanZero(System.Object)">
            <summary>
            Determines whether [is a number greater than zero] [the specified o].
            </summary>
            <param name="o">The o.</param>
            <returns><c>true</c> if [is a number greater than zero] [the specified o]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Commands.ICompleteCommand">
            <summary>
            Interface ICompleteCommand
            Implements the <see cref="T:System.Windows.Input.ICommand" />
            </summary>
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.ICompleteCommand.ChangeCanExecute">
            <summary>
            Changes the can execute.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand">
            <summary>
            Class CompleteCommand.
            Implements the <see cref="T:Xamarin.Forms.Command" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.ICompleteCommand" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Command" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Commands.ICompleteCommand" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.CompleteCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Commands.IStatefulViewModelCommand">
            <summary>
            This command remains in state whenever there are property changes for a page.
            It is also well-behaved on changes to OnNotifyPageCanBeSavedChanged.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.IViewModelCommand" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Commands.IViewModelCommand" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Commands.StatefulViewModelCommand">
            <summary>
            Class StatefulViewModelCommand.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.IStatefulViewModelCommand" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Commands.IStatefulViewModelCommand" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Commands.StatefulViewModelCommand._viewModel">
            <summary>
            The view model
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.StatefulViewModelCommand.#ctor(System.Action,Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel,System.Predicate{Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel})">
            <summary>
            Overrides how to set the command visibility:
            * When not busy (as with the base class)
            * When the page can be saved.
            </summary>
            <param name="action">The action.</param>
            <param name="viewModel">The view model.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.StatefulViewModelCommand.ReleaseUnmanagedResources">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.StatefulViewModelCommand.OnNotifyPageCanBeSavedChanged(System.Object,Com.MarcusTS.SharedForms.Common.Notifications.NotifyPageCanBeSavedChangedMessage)">
            <summary>
            Called when [notify page can be saved changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Commands.IViewModelCommand">
            <summary>
            Interface IViewModelCommand
            Implements the <see cref="T:System.Windows.Input.ICommand" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.Windows.Input.ICommand" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.IViewModelCommand.RefreshCanExecute">
            <summary>
            Refreshes the can execute.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand">
            <summary>
            Class ViewModelCommand.
            Implements the <see cref="T:Xamarin.Forms.Command" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Commands.IViewModelCommand" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Command" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Commands.IViewModelCommand" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand.#ctor(System.Action,Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy,System.Predicate{Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy})">
            <summary>
            Ensures that the command is not available if the view model is busy.
            </summary>
            <param name="action">The action.</param>
            <param name="viewModel">The view model.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand.RefreshCanExecute">
            <summary>
            Refreshes the can execute.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand.ReleaseUnmanagedResources">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Commands.ViewModelCommand.OnViewModelIsBusyChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [view model is busy changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Converters.DateTimeToPlainEnglishConverter">
            <summary>
            Class DateTimeToPlainEnglishConverter.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter&lt;System.DateTime?, System.String&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter&lt;System.DateTime?, System.String&gt;" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Converters.DateTimeToPlainEnglishConverter.AGO">
            <summary>
            The ago
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Converters.DateTimeToPlainEnglishConverter.INSTANCE">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.DateTimeToPlainEnglishConverter.Convert(System.Nullable{System.DateTime},System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Converters.IntToDoubleTwoWayConverter">
            <summary>
            Class IntToDoubleTwoWayConverter.
            Implements the <see cref="T:Xamarin.Forms.IValueConverter" />
            </summary>
            <seealso cref="T:Xamarin.Forms.IValueConverter" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Converters.IntToDoubleTwoWayConverter.INSTANCE">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.IntToDoubleTwoWayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> to <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to which to convert the value.</param>
            <param name="parameter">A parameter to use during the conversion.</param>
            <param name="culture">The culture to use during the conversion.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.IntToDoubleTwoWayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter`2">
            <summary>
            Class OneWayConverter.
            Implements the <see cref="T:Xamarin.Forms.IValueConverter" />
            </summary>
            <typeparam name="FromT">The type of from t.</typeparam>
            <typeparam name="ToT">The type of to t.</typeparam>
            <seealso cref="T:Xamarin.Forms.IValueConverter" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter`2.FailedDefaultValue">
            <summary>
            The failed default value
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> to <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to which to convert the value.</param>
            <param name="parameter">A parameter to use during the conversion.</param>
            <param name="culture">The culture to use during the conversion.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> back from <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to which to convert the value.</param>
            <param name="parameter">A parameter to use during the conversion.</param>
            <param name="culture">The culture to use during the conversion.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter`2.ConvertEasily(`0)">
            <summary>
            Converts the easily.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter`2.Convert(`0,System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>ToT.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Converters.ReverseBoolConverter">
            <summary>
            Class ReverseBoolConverter.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter&lt;System.Boolean, System.Boolean&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter&lt;System.Boolean, System.Boolean&gt;" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Converters.ReverseBoolConverter.INSTANCE">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.ReverseBoolConverter.Convert(System.Boolean,System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Converters.StringToDateTimeConverter">
            <summary>
            Class StringToDateTimeConverter.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter&lt;System.String, System.DateTime?&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Converters.OneWayConverter&lt;System.String, System.DateTime?&gt;" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Converters.StringToDateTimeConverter.StringToDateTimeConverterStatic">
            <summary>
            The string to date time converter static
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.StringToDateTimeConverter.Convert(System.String,System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="parameter">The parameter.</param>
            <returns>System.Nullable&lt;DateTime&gt;.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter">
            <summary>
            Class StringToNumericConverter.
            Implements the <see cref="T:Xamarin.Forms.IValueConverter" />
            </summary>
            <seealso cref="T:Xamarin.Forms.IValueConverter" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter.ConvertBackFunc">
            <summary>
            Gets or sets the convert back function.
            </summary>
            <value>The convert back function.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter.ValidationType">
            <summary>
            Gets or sets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> to <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to which to convert the value.</param>
            <param name="parameter">A parameter to use during the conversion.</param>
            <param name="culture">The culture to use during the conversion.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> back from <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to which to convert the value.</param>
            <param name="parameter">A parameter to use during the conversion.</param>
            <param name="culture">The culture to use during the conversion.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Converters.StringToNumericConverter.ConvertValueToString(System.Object)">
            <summary>
            Converts the value to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Images.SharedImageUtils">
            <summary>
            Class ImageUtils.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Images.SharedImageUtils.IMAGE_PRE_PATH">
            <summary>
            The image pre path
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy">
            <summary>
            The IsBusy interface.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy.IsBusy">
            <summary>
            Gets a value indicating whether is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy.IsBusyMessage">
            <summary>
            Gets the is busy message.
            </summary>
            <value>The is busy message.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy.IsBusyChanged">
            <summary>
            Occurs when [is busy changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IAmValid">
            <summary>
            Implements IsValid and IsInvalid booleans.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IAmValid.IsValid">
            <summary>
            Returns true if ... is valid.
            </summary>
            <value><c>null</c> if [is valid] contains no value, <c>true</c> if [is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid">
            <summary>
            Implements IsValid and IsInvalid booleans.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid.IsValid">
            <summary>
            Returns true if ... is valid.
            </summary>
            <value><c>null</c> if [is valid] contains no value, <c>true</c> if [is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid.LastValidationError">
            <summary>
            Gets or sets the last validation error.
            </summary>
            <value>The last validation error.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid.IsValidChanged">
            <summary>
            Occurs when [is valid changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid.Revalidate">
            <summary>
            Revalidates this instance.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanPullToRefresh">
            <summary>
            Interface ICanPullToRefresh
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.ICanPullToRefresh.RefreshDataCommand">
            <summary>
            Gets the refresh data command.
            </summary>
            <value>The refresh data command.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanRequestRemeasure">
            <summary>
            Interface ICanRequestRemeasure
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.ICanRequestRemeasure.RequestRemeasure">
            <summary>
            Forces the cell to recalculate its length and girth. Since one of these might be auto-calc, that value can
            easily become inaccurate over time because we constantly accept the maximum of any new value. If a row or
            column is deleted, this value will definitely be in question.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveCurrentMeasuredContentSizeRequester">
            <summary>
            Interface IHaveCurrentMeasuredContentSizeRequester
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveCurrentMeasuredContentSizeRequester.CurrentMeasuredContentSizeRequester">
            <summary>
            Gets or sets the current measured content size requester.
            </summary>
            <value>The current measured content size requester.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveGenericId`1">
            <summary>
            Interface IHaveGenericId
            </summary>
            <typeparam name="IdT">The type of the identifier t.</typeparam>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveGenericId`1.GetId">
            <summary>
            Gets the identifier.
            </summary>
            <returns>IdT.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveGenericId`1.SetId(`0)">
            <summary>
            Sets the identifier.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveInputtableCollection">
            <summary>
            Interface IHaveInputtableCollection
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveInputtableCollection.TypesAndCollections">
            <summary>
            Gets the types and collections.
            </summary>
            <value>The types and collections.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHavePageViewModel`1">
            <summary>
            The HasViewModel interface. Implements a ViewModel of type T. T must be an IAmBusy. This is
            basically a marker interface for some kind of object that at least has a ViewModel. Used for IoC.
            </summary>
            <typeparam name="T">the type of ViewModel</typeparam>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHavePageViewModel`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveStringFormat">
            <summary>
            Interface IHaveStringFormat
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveStringFormat.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveUniqueInitialAnimation">
            <summary>
            Interface IHaveUniqueInitialAnimation
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveUniqueInitialAnimation.HasAnimatedInOnce">
            <summary>
            The visibility response only occurs the first time a view becomes visible.
            This Boolean gets set once the view animates in, and thereafter, the view does not respond to visibility changes.
            The exception would be if the entire stage orientation were to change.  That would reset this Boolean.
            </summary>
            <value><c>true</c> if this instance has animated in once; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveUserName">
            <summary>
            The ViewModel interface.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveUserName.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveViewModel`1">
            <summary>
            Implements a ViewModel of type T. Unlike <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHavePageViewModel`1" />,
            this one only requires that the declaring view has a view model that itself implements IViewModel.
            </summary>
            <typeparam name="T">the type of ViewModel</typeparam>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveViewModel`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IManageCurrentStageSize">
            <summary>
            Interface IManageCurrentStageSize
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideChildStageBounds" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideChildStageBounds" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideChildStageBounds">
            <summary>
            Interface IProvideChildStageBounds
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideParentSizeOrOrientationChangeEvents" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideParentSizeOrOrientationChangeEvents" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideChildStageBounds.ProvideNewChildStageBounds(Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges)">
            <summary>
            Provides the new child stage bounds.
            </summary>
            <param name="child">The child.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges">
            <summary>
            Interface IReceiveParentStageSizeChanges
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges.CurrentStageBounds">
            <summary>
            Gets the current stage bounds.
            </summary>
            <value>The current stage bounds.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges.StageBoundsProvider">
            <summary>
            Gets or sets the stage bounds provider.
            </summary>
            <value>The stage bounds provider.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentStageSizeChanges.SetCurrentStageBounds(Xamarin.Forms.Rectangle)">
            <summary>
            Sets the current stage bounds.
            </summary>
            <param name="newBounds">The new bounds.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState">
            <summary>
            A view model base for pages.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState.AppState">
            <summary>
            The app state to navigate to
            </summary>
            <value>The state of the application.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState.MenuOrder">
            <summary>
            Gets the menu order.
            </summary>
            <value>The menu order.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState.MenuTitle">
            <summary>
            The menu title
            </summary>
            <value>The menu title.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState.ViewTitle">
            <summary>
            The page or view title (default: centered on the page)
            </summary>
            <value>The view title.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvidePageEvents">
            <summary>
            Interface IProvidePageEvents
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IProvidePageEvents.GetEventBroadcaster">
            <summary>
            Regrettable use of object; we could type-cast, but than makes it difficult to pass
            IProvidePageEvents at lower levels without omniscient knowledge off the parent page type.
            </summary>
            <value>The get event broadcaster.</value>
            <remarks>The function is better than a property when there is a chance of nesting to view inside
            view, etc. Whenever this property is assigned, it will always seek a legal value.
            Otherwise, an assignment might begin with null and then never change. The root of these
            events is a known, valid page that should be seekable by any deriver or nested deriver.</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideParentSizeOrOrientationChangeEvents">
            <summary>
            Interface IProvideParentSizeOrOrientationChangeEvents
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Interfaces.IProvideParentSizeOrOrientationChangeEvents.ParentSizeOrOrientationChanged">
            <summary>
            Occurs when [parent size or orientation changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentSizeOrOrientationChanges">
            <summary>
            Interface IReceiveParentSizeOrOrientationChanges
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IReceiveParentSizeOrOrientationChanges.HandleParentSizeOrOrientationChanged">
            <summary>
            Handles the parent size or orientation changed.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IReportDataChanges">
            <summary>
            Interface IReportDataChanges
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Interfaces.IReportDataChanges.ViewModelDataChanged">
            <summary>
            Occurs when [view model data changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IRequestCurrentMeasuredContentSize">
            <summary>
            Interface IRequestCurrentMeasuredContentSize
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Interfaces.IRequestCurrentMeasuredContentSize.RequestCurrentMeasuredContentSize">
            <summary>
            Occurs when [request current measured content size].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IRespondToVisibilityChanges">
            <summary>
            Interface IRespondToVisibilityChanges
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IRespondToVisibilityChanges.IsVisibleToUser">
            <summary>
            Gets a value indicating whether this instance is visible to user.
            </summary>
            <value><c>true</c> if this instance is visible to user; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Common.Interfaces.IRespondToVisibilityChanges.IsVisibleToUserChanged">
            <summary>
            Occurs when [is visible to user changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IRespondToVisibilityChanges.AfterUserVisibilityChanged(System.Boolean)">
            <summary>
            Afters the user visibility changed.
            </summary>
            <param name="isVisible">if set to <c>true</c> [is visible].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Interfaces.IRespondToVisibilityChanges.SetIsVisibleToUser(System.Boolean,System.Boolean)">
            <summary>
            Sets the is visible to user.
            </summary>
            <param name="isVisible">if set to <c>true</c> [is visible].</param>
            <param name="forceSet">if set to <c>true</c> [force set].</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IToolbarItem">
            <summary>
            Interface IToolbarItem
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Interfaces.IUserEmail">
            <summary>
            The ViewModel interface.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Interfaces.IUserEmail.UserEmail">
            <summary>
            Gets or sets the user name.
            </summary>
            <value>The user email.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine">
            <summary>
            Interface IStateMachineBase
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.DefaultState">
            <summary>
            Gets the default state.
            </summary>
            <value>The default state.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.DIContainer">
            <summary>
            Gets or sets the di container.
            </summary>
            <value>The di container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.StartUpState">
            <summary>
            Gets the start up state.
            </summary>
            <value>The start up state.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.GoToAppState(System.String,System.Boolean,System.Boolean)">
            <summary>
            Goes the state of to application.
            </summary>
            <param name="newState">The new state.</param>
            <param name="forceState">Ignores the comparison with the last app state; this change must occur.</param>
            <param name="andRebuildToolbars">if set to <c>true</c> [and rebuild toolbars].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.GoToDefaultState(System.Boolean,System.Boolean)">
            <summary>
            Goes to default state.
            </summary>
            <param name="forceAppState">if set to <c>true</c> [force application state].</param>
            <param name="andRebuildStageToolbars">if set to <c>true</c> [and rebuild stage toolbars].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.GoToLastAppState">
            <summary>
            Goes the state of to last application.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine.GoToStartUpState">
            <summary>
            Goes the state of to start up.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase">
            <summary>
            Class StateMachineBase. Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine" /> Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Navigation.ISimpleStateMachine" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase._lastAppState">
            <summary>
            The last application state
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.DefaultState">
            <summary>
            Gets the default state.
            </summary>
            <value>The default state.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.DIContainer">
            <summary>
            Gets or sets the di container.
            </summary>
            <value>The di container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.StartUpState">
            <summary>
            Gets the start up state.
            </summary>
            <value>The start up state.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.GoToAppState(System.String,System.Boolean,System.Boolean)">
            <summary>
            Goes the state of to application.
            </summary>
            <param name="newState">The new state.</param>
            <param name="forceState">Ignores the comparison with the last app state; this change must occur.</param>
            <param name="andRebuildToolbars">if set to <c>true</c> [and rebuild toolbars].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.GoToDefaultState(System.Boolean,System.Boolean)">
            <summary>
            Goes to default state.
            </summary>
            <param name="forceAppState">if set to <c>true</c> [force application state].</param>
            <param name="andRebuildStageToolbars">if set to <c>true</c> [and rebuild stage toolbars].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.GoToLastAppState">
            <summary>
            Goes the state of to last application.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.GoToStartUpState">
            <summary>
            Goes the state of to start up.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.GoToAppStateWithAdditionalPaths(Com.MarcusTS.SharedForms.Common.Navigation.StateMachineSubPath[])">
            <summary>
            Goes to a new state and then continues digging through nested states until the nested paths have been
            exhausted.
            </summary>
            <param name="nestedPaths">The nested paths.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.SimpleStateMachineBase.RespondToAppStateChange(System.String,System.Boolean)">
            <summary>
            Responds to application state change.
            </summary>
            <param name="newState">The new state.</param>
            <param name="andRebuildToolbars">if set to <c>true</c> [and rebuild toolbars].</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine">
            <summary>
            Interface IStateMachineBase
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine.MenuItems">
            <summary>
            Gets the menu items.
            </summary>
            <value>The menu items.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine.GoToAppState(System.String,System.Boolean)">
            <summary>
            Goes the state of to application.
            </summary>
            <param name="newState">The new state.</param>
            <param name="preventStackPush">if set to <c>true</c> [prevent stack push].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine.GoToLandingPage(System.Boolean)">
            <summary>
            Goes to landing page.
            </summary>
            <param name="preventStackPush">if set to <c>true</c> [prevent stack push].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine.GoToStartUpState">
            <summary>
            Goes the state of to start up.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase">
            <summary>
            A controller to manage which views and view models are shown for a given state
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase._lastAppState">
            <summary>
            The last application state
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.APP_STATES">
            <summary>
            Gets the application states.
            </summary>
            <value>The application states.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.AppStartUpState">
            <summary>
            Gets the state of the application start up.
            </summary>
            <value>The state of the application start up.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.MenuItems">
            <summary>
            Gets the menu items.
            </summary>
            <value>The menu items.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.GoToAppState(System.String,System.Boolean)">
            <summary>
            Goes the state of to application.
            </summary>
            <param name="newState">The new state.</param>
            <param name="preventStackPush">if set to <c>true</c> [prevent stack push].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.GoToLandingPage(System.Boolean)">
            <summary>
            Goes to landing page.
            </summary>
            <param name="preventStackPush">if set to <c>true</c> [prevent stack push].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.GoToStartUpState">
            <summary>
            Goes the state of to start up.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.GetMenuOrderFromAppState(System.String)">
            <summary>
            Gets the state of the menu order from application.
            </summary>
            <param name="appState">State of the application.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.ReleaseUnmanagedResources">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.RespondToAppStateChange(System.String,Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState,System.Boolean)">
            <summary>
            Responds to application state change.
            </summary>
            <param name="newState">The new state.</param>
            <param name="menuData">The menu data.</param>
            <param name="preventStackPush">if set to <c>true</c> [prevent stack push].</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineBase.AppStartUpMessage">
            <summary>
            Class AppStartUpMessage.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineSubPath">
            <summary>
            Class StateMachineSubPath.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineSubPath.AppState">
            <summary>
            Gets or sets the state of the application.
            </summary>
            <value>The state of the application.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Navigation.StateMachineSubPath.StateMachine">
            <summary>
            Gets or sets the state machine.
            </summary>
            <value>The state machine.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory">
            <summary>
            Class DialogFactory.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.TOAST_DISSOLVE_SECONDS">
            <summary>
            The toast dissolve seconds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.WAIT_FOREVER">
            <summary>
            The wait forever
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.DECISION_TOAST_BACKGROUND_COLOR">
            <summary>
            The decision toast background color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ERROR_TOAST_BACKGROUND_COLOR">
            <summary>
            The error toast background color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.INFO_TOAST_BACKGROUND_COLOR">
            <summary>
            The information toast background color
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ShowDecisionToast(System.String,System.Action,System.Boolean)">
            <summary>
            An important toast with an action that takes the user somewhere in response.
            </summary>
            <param name="toastStr">The toast message.</param>
            <param name="action">The action to take once the user taps the toast.  *Required*.</param>
            <param name="useTimeout">Whether to remove the toast after a timeout.  Not normal for this scenario: defaults to
            *false*.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ShowErrorToast(System.String,System.String,System.Boolean,System.Action)">
            <summary>
            An error toast to notify the user that something went wrong.
            </summary>
            <param name="toastStr">The toast message.</param>
            <param name="actionText">The button text</param>
            <param name="useTimeout">Whether to remove the toast after a timeout.  Not normal for this scenario: defaults to
            *false*.</param>
            <param name="action">The action to take once the user taps the toast.  Optional.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ShowExceptionToast(System.String,System.Exception,System.Boolean,System.Action)">
            <summary>
            An error toast to notify the user that an error has occurred.
            </summary>
            <param name="toastPrefix">The first part of the toast message.
            The second part will be added by this method (see below).</param>
            <param name="ex">The exception.</param>
            <param name="useTimeout">Whether to remove the toast after a timeout.  Not normal for this scenario: defaults to
            *false*.</param>
            <param name="action">The action to take once the user taps the toast.  Optional.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ShowInfoToast(System.String,System.String,System.Boolean,System.Action)">
            <summary>
            A passive toast in a benign color to indicate information only;
            does not normally trigger an action, but can.
            </summary>
            <param name="toastStr">The toast message.</param>
            <param name="actionText">The action text.</param>
            <param name="useTimeout">Whether to remove the toast after a timeout.  Defaults to *true*.</param>
            <param name="action">The action to take if the user taps the toast.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ShowToastInternal(System.String,System.String,Xamarin.Forms.Color,Xamarin.Forms.Color,Xamarin.Forms.Color,System.Boolean,System.Int32,System.Action)">
            <summary>
            Can call directly.
            </summary>
            <param name="toastStr">The toast string.</param>
            <param name="actionText">The action text.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="messageTextColor">Color of the message text.</param>
            <param name="actionTextColor">Color of the action text.</param>
            <param name="useTimeout">if set to <c>true</c> [use timeout].</param>
            <param name="toastDissolveSeconds">The toast dissolve seconds.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DialogFactory.ShowYesNoDialog(System.String,System.String,System.String,System.String)">
            <summary>
            Shows the yes no dialog.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="okText">The ok text.</param>
            <param name="cancelText">The cancel text.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.IDeviceSizeChangeMessageArgs">
            <summary>
            Interface IDeviceSizeChangeMessageArgs
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.IDeviceSizeChangeMessageArgs.ScreenHeight">
            <summary>
            Gets or sets the height of the screen.
            </summary>
            <value>The height of the screen.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.IDeviceSizeChangeMessageArgs.ScreenWidth">
            <summary>
            Gets or sets the width of the screen.
            </summary>
            <value>The width of the screen.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardToggledMessageArgs">
            <summary>
            Interface IKeyboardToggledMessageArgs
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardToggledMessageArgs.IsDisplayed">
            <summary>
            Gets a value indicating whether this instance is displayed.
            </summary>
            <value><c>true</c> if this instance is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardToggledMessageArgs.KeyboardHeight">
            <summary>
            Gets the height of the keyboard.
            </summary>
            <value>The height of the keyboard.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage">
            <summary>
            Interface IMessage
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.IPageLifecycleMessageArgs">
            <summary>
            Interface IPageLifecycleMessageArgs
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.IPageLifecycleMessageArgs.SendingPage">
            <summary>
            Gets or sets the page event.
            </summary>
            <value>The page event.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.FormsMessengerUtils">
            <summary>
            A global static utility library to assist with Xamarin.Forms.MessagingCenter calls.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.FormsMessengerUtils.Send``1(``0,System.Object)">
            <summary>
            Sends the specified message.
            </summary>
            <typeparam name="TMessage">The type of the t message.</typeparam>
            <param name="message">The message.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.FormsMessengerUtils.Subscribe``1(System.Object,System.Action{System.Object,``0})">
            <summary>
            Subscribes the specified subscriber.
            </summary>
            <typeparam name="TMessage">The type of the t message.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.FormsMessengerUtils.Unsubscribe``1(System.Object)">
            <summary>
            Unsubscribes the specified subscriber.
            </summary>
            <typeparam name="TMessage">The type of the t message.</typeparam>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangedMessage">
            <summary>
            Class AppStateChangedMessage.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs" />
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangedMessage.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangedMessage" /> class.
            </summary>
            <param name="oldAppState">Old state of the application.</param>
            <param name="preventNavStackPush">if set to <c>true</c> [prevent nav stack push].</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs">
            <summary>
            Class AppStateChangeMessageArgs.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs" /> class.
            </summary>
            <param name="oldAppState">Old state of the application.</param>
            <param name="preventNavStackPush">if set to <c>true</c> [prevent nav stack push].</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs.OldAppState">
            <summary>
            Gets or sets the old state of the application.
            </summary>
            <value>The old state of the application.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.AppStateChangeMessageArgs.PreventNavStackPush">
            <summary>
            Gets or sets a value indicating whether [prevent nav stack push].
            </summary>
            <value><c>true</c> if [prevent nav stack push]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.BroadcastDeviceSizeChangedMessage">
            <summary>
            Notifies the app that the device size has changed
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.BroadcastDeviceSizeChangedMessage.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.BroadcastDeviceSizeChangedMessage" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.ConnectivityChangedMessage">
            <summary>
            Class ConnectivityChangedMessage.
            Implements the
            <see cref="T:System.Boolean" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;System.Boolean&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;System.Boolean&gt;" />
            <seealso cref="T:System.Boolean" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs">
            <summary>
            This message is issued as the args whenever a local platform senses a change in its orientation.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IDeviceSizeChangeMessageArgs" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IDeviceSizeChangeMessageArgs" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IDeviceSizeChangeMessageArgs" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs.ScreenHeight">
            <summary>
            Gets or sets the height of the screen.
            </summary>
            <value>The height of the screen.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs.ScreenWidth">
            <summary>
            Gets or sets the width of the screen.
            </summary>
            <value>The width of the screen.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.FragileServiceFailureMessage">
            <summary>
            Class FragileServiceFailureMessage.
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Services.IFragileService&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Services.IFragileService&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.FragileServiceSuccessMessage">
            <summary>
            Class FragileServiceSuccessMessage.
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Services.IFragileService&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Services.IFragileService&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload`1">
            <summary>
            Class GenericMessageWithPayload.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload`1.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
            <value>The payload.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.KeyboardToggledMessageArgs">
            <summary>
            Class KeyboardToggledMessageArgs.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardToggledMessageArgs" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardToggledMessageArgs" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.KeyboardToggledMessageArgs.#ctor(System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.KeyboardToggledMessageArgs" /> class.
            </summary>
            <param name="isDisplayed">if set to <c>true</c> [is displayed].</param>
            <param name="keyboardHeight">Height of the keyboard.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.KeyboardToggledMessageArgs.IsDisplayed">
            <summary>
            Gets a value indicating whether this instance is displayed.
            </summary>
            <value><c>true</c> if this instance is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Notifications.KeyboardToggledMessageArgs.KeyboardHeight">
            <summary>
            Gets the height of the keyboard.
            </summary>
            <value>The height of the keyboard.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.LocalDeviceSizeChangedMessage">
            <summary>
            Notifies the orientation service that a the local device size has changed.
            Do *not* use for general broadcast, as it will recur!
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.DeviceSizeChangeMessageArgs" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.LocalDeviceSizeChangedMessage.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.LocalDeviceSizeChangedMessage" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.MenuLoadedMessage">
            <summary>
            Class MenuLoadedMessage.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.NavBarMenuTappedMessage">
            <summary>
            Class NavBarMenuTappedMessage.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.NoPayloadMessage">
            <summary>
            Class NoPayloadMessage.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Notifications.IMessage" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.NotifyPageCanBeSavedChangedMessage">
            <summary>
            Class NotifyPageCanBeSavedChangedMessage.
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.ObjectDisappearingMessage">
            <summary>
            Class ObjectDisappearingMessage.
            Implements the <see cref="T:System.Object" />
            Implements the <see cref="T:System.Object" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;System.Object&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;System.Object&gt;" />
            <seealso cref="T:System.Object" />
            <seealso cref="T:System.Object" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.RefreshUIViewMessage">
            <summary>
            Class RefreshUIViewMessage.
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel" />
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel&gt;" />
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.ViewIsBeingEditedMessage">
            <summary>
            Class ViewIsBeingEditedMessage.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;System.Boolean&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Common.Notifications.GenericMessageWithPayload&lt;System.Boolean&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardNotificationProvider">
            <summary>
            Interface IKeyboardNotificationProvider
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardNotificationProvider.StartNotifying">
            <summary>
            Starts the notifying.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.IKeyboardNotificationProvider.StopNotifying">
            <summary>
            Stops the notifying.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Notifications.NotificationUtils">
            <summary>
            Class NotificationUtils.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.NotificationUtils.BODY">
            <summary>
            The body
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Notifications.NotificationUtils.ID">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.NotificationUtils.HandleBackgroundNotification(System.String)">
            <summary>
            Sets various flags based on the id so the app can start and go to a given page.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Notifications.NotificationUtils.HandleForegroundNotification(System.String,System.String)">
            <summary>
            Determine if this is a normal push notification or an error.
            </summary>
            <param name="id">The identifier.</param>
            <param name="body">The body.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService">
            <summary>
            For identifying services that can fail and might require a response by the StateMachine.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.IFragileService.CanBeForcedOn">
            <summary>
            Gets a value indicating whether this instance can be forced on.
            </summary>
            <value><c>true</c> if this instance can be forced on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.IFragileService.CanTurnOnFromSettings">
            <summary>
            Gets a value indicating whether this instance can turn on from settings.
            </summary>
            <value><c>true</c> if this instance can turn on from settings; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.IFragileService.IsAvailable">
            <summary>
            Gets a value indicating whether this instance is available.
            </summary>
            <value><c>true</c> if this instance is available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.IFragileService.IsOn">
            <summary>
            Gets a value indicating whether this instance is on.
            </summary>
            <value><c>true</c> if this instance is on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.IFragileService.IsServiceListening">
            <summary>
            Gets a value indicating whether this instance is service listening.
            </summary>
            <value><c>true</c> if this instance is service listening; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.IFragileService.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IFragileService.CancelAllActivities">
            <summary>
            Cancels all activities.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IFragileService.GoToSettings">
            <summary>
            Goes to settings.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IFragileService.OfferToForceOn">
            <summary>
            Offers to force on.
            </summary>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IFragileService.RestartWhenPossible">
            <summary>
            Restarts the when possible.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IFragileService.SetFailState">
            <summary>
            Sets the state of the fail.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IFragileService.StartUp">
            <summary>
            Starts up.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase">
            <summary>
            Class FragileServiceBase.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Services.IFragileService" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.WAIT_SECONDS">
            <summary>
            The wait seconds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase._startCancellationTokenSource">
            <summary>
            The start cancellation token source
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase._stopCancellationTokenSource">
            <summary>
            The stop cancellation token source
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase._stopTimer">
            <summary>
            The stop timer
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.CanBeForcedOn">
            <summary>
            Gets a value indicating whether this instance can be forced on.
            </summary>
            <value><c>true</c> if this instance can be forced on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.CanTurnOnFromSettings">
            <summary>
            Gets a value indicating whether this instance can turn on from settings.
            </summary>
            <value><c>true</c> if this instance can turn on from settings; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.IsAvailable">
            <summary>
            Gets a value indicating whether this instance is available.
            </summary>
            <value><c>true</c> if this instance is available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.IsOn">
            <summary>
            Gets a value indicating whether this instance is on.
            </summary>
            <value><c>true</c> if this instance is on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.IsServiceListening">
            <summary>
            Gets a value indicating whether this instance is service listening.
            </summary>
            <value><c>true</c> if this instance is service listening; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.CancelAllActivities">
            <summary>
            Cancels all activities.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.GoToSettings">
            <summary>
            Goes to settings.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.OfferToForceOn">
            <summary>
            Offers to force on.
            </summary>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.RestartWhenPossible">
            <summary>
            1. Set a timer
            2. On tick see if the target service is available and can be started
            3. When  it is, start
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.SetFailState">
            <summary>
            Sets the state of the fail.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.StartUp">
            <summary>
            Starts up.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.AddListeners">
            <summary>
            Adds the listeners.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.RemoveListeners">
            <summary>
            Removes the listeners.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.StartListeningToService">
            <summary>
            Starts the listening to service.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.StopListeningToService">
            <summary>
            Stops the listening to service.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.ReleaseUnmanagedResources">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.StartListening">
            <summary>
            Starts the listening.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.StopListening">
            <summary>
            Stops the listening.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.FragileServiceBase.StopListeningInBackground">
            <summary>
            Stops the listening in background.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Services.IKeyboardService">
            <summary>
            Interface IKeyboardService
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.IKeyboardService.HideKeyboard">
            <summary>
            Hides the keyboard.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Services.OrientationService">
            <summary>
            Class OrientationService.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.OrientationService.IsLandscape">
            <summary>
            Gets or sets a value indicating whether this instance is landscape.
            </summary>
            <value><c>true</c> if this instance is landscape; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.OrientationService.ScreenHeight">
            <summary>
            Gets or sets the height of the screen.
            </summary>
            <value>The height of the screen.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Services.OrientationService.ScreenWidth">
            <summary>
            Gets or sets the width of the screen.
            </summary>
            <value>The width of the screen.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Services.OrientationService.HandleDeviceSizeChanged(System.Object,Com.MarcusTS.SharedForms.Common.Notifications.LocalDeviceSizeChangedMessage)">
            <summary>
            Handles the device size changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.BindableUtils">
            <summary>
            Class BindableUtils.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.BindableUtils.CreateBindableProperty``2(System.String,``1,Xamarin.Forms.BindingMode,System.Action{``0,``1,``1})">
            <summary>
            Creates the bindable property.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.BindableUtils.CreateReadOnlyBindableProperty``2(System.String,``1,Xamarin.Forms.BindingMode,System.Action{``0,``1,``1})">
            <summary>
            Creates the read only bindable property.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.BindableUtils.SetUpBinding(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.Object)">
            <summary>
            Sets up binding.
            </summary>
            <param name="view">The view.</param>
            <param name="bindableProperty">The bindable property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="stringFormat">The string format.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils">
            <summary>
            Class ColorUtils.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.DEEP_GRAY_BLUE">
            <summary>
            The deep gray blue
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.DEEP_GRAY_GREEN">
            <summary>
            The deep gray green
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.DEEP_GRAY_RED">
            <summary>
            The deep gray red
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.HEADER_AND_TOOLBAR_COLOR">
            <summary>
            The header and toolbar color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.HEADER_AND_TOOLBAR_COLOR_DEEP">
            <summary>
            The header and toolbar color deep
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.HEADER_AND_TOOLBAR_COLOR_PALE">
            <summary>
            The header and toolbar color pale
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.ILLEGAL_ENTRY_COLOR">
            <summary>
            The illegal entry color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.MAIN_PAGE_BACKGROUND_COLOR">
            <summary>
            The main page background color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.PALE_GRAY">
            <summary>
            The pale gray
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.ColorUtils.SIDE_MENU_COLOR">
            <summary>
            The side menu color
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst">
            <summary>
            Class FormsConst.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/text/fonts
            IOS     Android    UWP
            Default	   16       14	      14
            Micro	   11	      10	      15.667
            Small	   13	      14	      18.667
            Medium	   16	      17	      22.667
            Large	   20	      22	      32
            Body	      17	      16	      14
            Header	   17	      96	      46
            Title	   28	      24	      24
            Subtitle	22	      16	      20
            Caption	   12	      12	      12</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions">
            <summary>
            Enum OffScreenPositions
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions.NONE">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions.LEFT">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions.TOP">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions.RIGHT">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions.BOTTOM">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions">
            <summary>
            Enum OnScreenPositions
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.NONE">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.LEFT_CENTER">
            <summary>
            The left center
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.TOP_LEFT">
            <summary>
            The top left
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.TOP_CENTER">
            <summary>
            The top center
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.TOP_RIGHT">
            <summary>
            The top right
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.RIGHT_CENTER">
            <summary>
            The right center
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.BOTTOM_LEFT">
            <summary>
            The bottom left
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.BOTTOM_CENTER">
            <summary>
            The bottom center
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.BOTTOM_RIGHT">
            <summary>
            The bottom right
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions.CENTER">
            <summary>
            The center
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageHeaderPositions">
            <summary>
            Enum StageHeaderPositions
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageHeaderPositions.NONE">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageHeaderPositions.TOP">
            <summary>
            The top
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions">
            <summary>
            Enum StageToolbarPositions
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions.NONE">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions.BOTTOM">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions.LEFT">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions.TOP">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions.RIGHT">
            <summary>
            The right
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SubStageFlowDirections">
            <summary>
            Enum SubStageFlowDirections
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SubStageFlowDirections.LEFT_TO_RIGHT">
            <summary>
            The left to right
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SubStageFlowDirections.RIGHT_TO_LEFT">
            <summary>
            The right to left
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SubStageFlowDirections.TOP_TO_BOTTOM">
            <summary>
            The top to bottom
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SubStageFlowDirections.BOTTOM_TO_TOP">
            <summary>
            The bottom to top
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ViewAlignments">
            <summary>
            Enum ViewAlignments
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ViewAlignments.START">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ViewAlignments.MIDDLE">
            <summary>
            The middle
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ViewAlignments.END">
            <summary>
            The end
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ViewAlignments.JUSTIFY">
            <summary>
            The justify
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.DEFAULT_CORNER_RADIUS_FACTOR">
            <summary>
            The default corner radius factor
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.DEFAULT_CORNER_RADIUS_FIXED">
            <summary>
            The default corner radius fixed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.CHARACTERS_TO_FONT_SIZE_ESTIMATOR">
            <summary>
            The characters to font size estimator
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.CREDIT_CARD_TEXT_MASK">
            <summary>
            The credit card text mask
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.CURRENCY_COLUMN_WIDTH">
            <summary>
            The currency column width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.CURRENCY_STRING_FORMAT">
            <summary>
            The currency string format
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.DATE_COLUMN_WIDTH">
            <summary>
            The date column width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.DATE_TIME_FORMAT">
            <summary>
            The date time format
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.DEFAULT_TEXT_SIZE">
            <summary>
            The default text size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.FALSE_STR">
            <summary>
            The false string
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.HAPTIC_VIBRATION_MILLISECONDS">
            <summary>
            The haptic vibration milliseconds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.HEIGHT_PROPERTY_NAME">
            <summary>
            The height property name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.IOS_NESTED_STAGE_REDUCTION">
            <summary>
            The ios nested stage reduction
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.IOS_TOP_MARGIN">
            <summary>
            The ios top margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.LEGAL_ASPECT_RATIO">
            <summary>
            The legal aspect ratio
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.LONG_DATE_FORMAT">
            <summary>
            The ios top margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.NO_SCALE">
            <summary>
            The no scale
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.NORMAL_BUTTON_FONT_SIZE">
            <summary>
            The normal button font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.NORMAL_SCALE">
            <summary>
            The normal scale
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.NOT_VISIBLE_OPACITY">
            <summary>
            The not visible opacity
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SELECTED_BUTTON_FONT_SIZE">
            <summary>
            The selected button font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SHORT_DATE_FORMAT">
            <summary>
            The short date format
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SIMPLE_DATE_FORMAT">
            <summary>
            The simple date format
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SPACE">
            <summary>
            The space
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SPACE_CHAR">
            <summary>
            The space character
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.STANDARD_KEYBOARD_NUMBER">
            <summary>
            The standard keyboard number
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.TRUE_STR">
            <summary>
            The true string
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.VISIBLE_OPACITY">
            <summary>
            The visible opacity
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.WIDTH_PROPERTY_NAME">
            <summary>
            The width property name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.X_PROPERTY_NAME">
            <summary>
            The x property name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.Y_PROPERTY_NAME">
            <summary>
            The y property name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ZERO_CHAR">
            <summary>
            The zero character
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.BUTTON_BOUNCE_MILLISECONDS">
            <summary>
            The button bounce milliseconds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.DEFAULT_FONT_COLOR">
            <summary>
            The default font color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.EDITABLE_VIEW_FONT_SIZE">
            <summary>
            The editable view font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ESTIMATED_KEYBOARD_HEIGHT">
            <summary>
            The estimated keyboard height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.MAJOR_BUTTON_HEIGHT">
            <summary>
            The major button height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.MAJOR_BUTTON_WIDTH">
            <summary>
            The major button width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.MINIMUM_ENTRY_COLUMN_WIDTH">
            <summary>
            The minimum entry column width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SELECTED_IMAGE_BUTTON_BORDER_WIDTH">
            <summary>
            The selected image button border width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.STANDARD_KEYBOARD">
            <summary>
            The standard keyboard
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.ANDROID_MULTIPLIER">
            <summary>
            The android multiplier
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.BASELINE_SCREEN_HEIGHT">
            <summary>
            The baseline screen height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.BASELINE_SCREEN_WIDTH">
            <summary>
            The baseline screen width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.IOS_MULTIPLIER">
            <summary>
            The ios multiplier
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SHORT_DEVICE_FACTOR">
            <summary>
            The short device factor
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.CURRENT_DEVICE_LENGTH_RATIO">
            <summary>
            The current device length ratio
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.CURRENT_DEVICE_WIDTH_RATIO">
            <summary>
            The current device width ratio
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.MAX_OS_AND_DEVICE_ADJUSTMENT">
            <summary>
            The maximum os and device adjustment
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.IsShortDevice">
            <summary>
            Gets a value indicating whether this instance is short device.
            </summary>
            <value><c>true</c> if this instance is short device; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.AdjustForOsAndDevice(System.Double)">
            <summary>
            MUST GO FIRST
            </summary>
            <param name="startingSize">Size of the starting.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.AdjustForOsAndDevice(Xamarin.Forms.NamedSize,System.Double)">
            <summary>
            Adjusts for os and device.
            </summary>
            <param name="namedSize">Size of the named.</param>
            <param name="additionalFactor">The additional factor.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsConst.AdjustHeightForShortDevice(System.Double)">
            <summary>
            Adjusts the height for short device.
            </summary>
            <param name="startingValue">The starting value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils">
            <summary>
            Class FormsUtils.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddAndSetRowsAndColumns(Xamarin.Forms.Grid,Xamarin.Forms.View,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds the and set rows and columns.
            </summary>
            <param name="grid">The grid.</param>
            <param name="view">The view.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="rowSpan">The row span.</param>
            <param name="colSpan">The col span.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddAnimationAndHapticFeedback(Xamarin.Forms.View,System.Boolean,System.Boolean)">
            <summary>
            Adds the animation and haptic feedback.
            </summary>
            <param name="view">The view.</param>
            <param name="animate">if set to <c>true</c> [animate].</param>
            <param name="vibrate">if set to <c>true</c> [vibrate].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddAutoColumn(Xamarin.Forms.Grid)">
            <summary>
            Adds the automatic column.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddAutoRow(Xamarin.Forms.Grid)">
            <summary>
            Adds the automatic row.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddFixedColumn(Xamarin.Forms.Grid,System.Double)">
            <summary>
            Adds the fixed column.
            </summary>
            <param name="grid">The grid.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddFixedRow(Xamarin.Forms.Grid,System.Double)">
            <summary>
            Adds the fixed row.
            </summary>
            <param name="grid">The grid.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddOverlayBasedOnPosition(Xamarin.Forms.RelativeLayout,Xamarin.Forms.View,Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions,System.Double,System.Double)">
            <summary>
            Adds the overlay based on position.
            </summary>
            <param name="layout">The layout.</param>
            <param name="view">The view.</param>
            <param name="position">The position.</param>
            <param name="viewWidth">Width of the view.</param>
            <param name="viewHeight">Height of the view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddRowContent(Xamarin.Forms.Grid,Xamarin.Forms.View)">
            <summary>
            Adds the content of the row.
            </summary>
            <param name="grid">The grid.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddStarColumn(Xamarin.Forms.Grid,System.Double)">
            <summary>
            Adds the star column.
            </summary>
            <param name="grid">The grid.</param>
            <param name="factor">The factor.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AddStarRow(Xamarin.Forms.Grid,System.Double)">
            <summary>
            Adds the star row.
            </summary>
            <param name="grid">The grid.</param>
            <param name="factor">The factor.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AdjustedForScreenHeightBug(System.Single)">
            <summary>
            Adjusteds for screen height bug.
            </summary>
            <param name="originalHeight">Height of the original.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AnimateHeightChange(Xamarin.Forms.View,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <summary>
            Animates the height change.
            </summary>
            <param name="view">The view.</param>
            <param name="nextHeight">Height of the next.</param>
            <param name="fadeMilliseconds">The fade milliseconds.</param>
            <param name="easing">The easing.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AnimateWidthChange(Xamarin.Forms.View,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <summary>
            Animates the width change.
            </summary>
            <param name="view">The view.</param>
            <param name="nextWidth">Width of the next.</param>
            <param name="fadeMilliseconds">The fade milliseconds.</param>
            <param name="easing">The easing.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.AreValidAndHaveChanged(Xamarin.Forms.Rectangle,System.String,Xamarin.Forms.Rectangle)">
            <summary>
            Boundses the are valid and have changed.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="propName">Name of the property.</param>
            <param name="lastBounds">The last bounds.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CheckAgainstZero(System.Double)">
            <summary>
            Checks the against zero.
            </summary>
            <param name="dbl">The double.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ClearCompletely(Xamarin.Forms.Grid)">
            <summary>
            Clears the completely.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CompressedDate(System.DateTime)">
            <summary>
            Compresseds the date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ConsiderIosNestedStageHeightHack(System.Boolean)">
            <summary>
            Considers the ios nested stage height hack.
            </summary>
            <param name="isNestedStage">if set to <c>true</c> [is nested stage].</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ConvertToInternalBounds(Xamarin.Forms.Rectangle)">
            <summary>
            Converts to internal bounds.
            </summary>
            <param name="rect">The rect.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateEntryStyle(System.String,System.Nullable{System.Double},System.Nullable{Xamarin.Forms.Color},System.Nullable{Xamarin.Forms.Color},System.Nullable{Xamarin.Forms.FontAttributes})">
            <summary>
            Creates the entry style.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="backColor">Color of the back.</param>
            <param name="textColor">Color of the text.</param>
            <param name="fontAttributes">The font attributes.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateLabelStyle(System.String,System.Nullable{System.Double},System.Nullable{Xamarin.Forms.Color},System.Nullable{Xamarin.Forms.Color},System.Nullable{Xamarin.Forms.FontAttributes})">
            <summary>
            Creates the label style.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="backColor">Color of the back.</param>
            <param name="textColor">Color of the text.</param>
            <param name="fontAttributes">The font attributes.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateOffScreenRect(Xamarin.Forms.Size,System.Double,System.Double,Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions,System.Boolean,System.Double)">
            <summary>
            Creates the off screen rect.
            </summary>
            <param name="parentViewSize">Size of the parent view.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="position">The position.</param>
            <param name="forceLongSize">if set to <c>true</c> [force long size].</param>
            <param name="additionalTopAllowance">The additional top allowance.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateOffScreenRectWithForcedSide(Xamarin.Forms.Size,System.Double,Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OffScreenPositions,System.Double)">
            <summary>
            Creates the off screen rect with forced side.
            </summary>
            <param name="parentViewSize">Size of the parent view.</param>
            <param name="widthHeight">Height of the width.</param>
            <param name="position">The position.</param>
            <param name="additionalTopAllowance">The additional top allowance.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateOnScreenRect(Xamarin.Forms.Size,System.Double,System.Double,Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions,Xamarin.Forms.Thickness,System.Boolean,System.Double)">
            <summary>
            Creates an on-screen rectangle for the current control based on its width, height and position.
            If forceLongSize==true, either the width or height are set to the maximum screen width or height, depending on the
            position.
            forceLongSize *only* works with basic positions --
            - LEFT_CENTER
            - TOP_CENTER
            - RIGHT_CENTER
            - BOTTOM_CENTER
            </summary>
            <param name="parentViewSize">Size of the parent view.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="position">The position.</param>
            <param name="parentViewPadding">The parent view padding.</param>
            <param name="forceLongSize">if set to <c>true</c> [force long size].</param>
            <param name="additionalTopAllowance">The additional top allowance.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateOnScreenRectWithForcedSide(Xamarin.Forms.Size,System.Double,Com.MarcusTS.SharedForms.Common.Utils.FormsConst.OnScreenPositions,Xamarin.Forms.Thickness,System.Double)">
            <summary>
            Creates the on screen rect with forced side.
            </summary>
            <param name="parentViewSize">Size of the parent view.</param>
            <param name="widthHeight">Height of the width.</param>
            <param name="position">The position.</param>
            <param name="parentViewPadding">The parent view padding.</param>
            <param name="additionalTopAllowance">The additional top allowance.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateRelativeOverlay(Xamarin.Forms.RelativeLayout,Xamarin.Forms.View,Xamarin.Forms.Thickness)">
            <summary>
            Creates the relative overlay.
            </summary>
            <param name="layout">The layout.</param>
            <param name="viewToAdd">The view to add.</param>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateShapeViewStyle(System.Nullable{Xamarin.Forms.Color},System.Nullable{System.Double},System.Nullable{Xamarin.Forms.Color},System.Nullable{System.Double})">
            <summary>
            Creates the shape view style.
            </summary>
            <param name="backColor">Color of the back.</param>
            <param name="cornerRadius">The corner radius.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="borderThickness">The border thickness.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.CreateTasks(System.Threading.Tasks.Task[])">
            <summary>
            Creates the tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <returns>Task[].</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.EnumTryParse``1(System.String,``0@)">
            <summary>
            Enums the try parse.
            </summary>
            <typeparam name="EnumT">The type of the enum t.</typeparam>
            <param name="input">The input.</param>
            <param name="theEnum">The enum.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.EstimateHeight(Xamarin.Forms.Label,System.Double)">
            <summary>
            Estimates the height.
            </summary>
            <param name="label">The label.</param>
            <param name="width">The width.</param>
            <returns>System.Double.</returns>
            <remarks>This is rough and inductive.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.Expanded(System.String,System.Int32)">
            <summary>
            Expandeds the specified space count.
            </summary>
            <param name="str">The string.</param>
            <param name="spaceCount">The space count.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.FadeIn(Xamarin.Forms.View,System.UInt32,Xamarin.Forms.Easing,System.Double)">
            <summary>
            Fades the in.
            </summary>
            <param name="view">The view.</param>
            <param name="fadeMilliseconds">The fade milliseconds.</param>
            <param name="easing">The easing.</param>
            <param name="maxOpacity">The maximum opacity.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.FadeOut(Xamarin.Forms.View,System.UInt32,Xamarin.Forms.Easing)">
            <summary>
            Fades the out.
            </summary>
            <param name="view">The view.</param>
            <param name="fadeMilliseconds">The fade milliseconds.</param>
            <param name="easing">The easing.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.FixNegativeDimensions(Xamarin.Forms.Rectangle)">
            <summary>
            Fixes the negative dimensions.
            </summary>
            <param name="rect">The rect.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ForceAspect(Xamarin.Forms.Rectangle,System.Double)">
            <summary>
            Forces the aspect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="aspect">The aspect.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ForceStyle(Xamarin.Forms.View,Xamarin.Forms.Style)">
            <summary>
            Forces the style.
            </summary>
            <param name="view">The view.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetExpandingAbsoluteLayout">
            <summary>
            Gets the expanding absolute layout.
            </summary>
            <returns>AbsoluteLayout.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetExpandingGrid">
            <summary>
            Gets the expanding grid.
            </summary>
            <returns>Grid.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetExpandingRelativeLayout">
            <summary>
            Gets the expanding relative layout.
            </summary>
            <returns>RelativeLayout.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetExpandingScrollView">
            <summary>
            Gets the expanding scroll view.
            </summary>
            <returns>ScrollView.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetExpandingStackLayout">
            <summary>
            Gets the expanding stack layout.
            </summary>
            <returns>StackLayout.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetImage(System.String,System.Double,System.Double,Xamarin.Forms.Aspect,System.Boolean,System.Type)">
            <summary>
            Gets the image.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="aspect">The aspect.</param>
            <param name="getFromResources">if set to <c>true</c> [get from resources].</param>
            <param name="resourceClass">The resource class.</param>
            <returns>Image.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetKeyboardFromString(System.String)">
            <summary>
            Gets the keyboard from string.
            </summary>
            <param name="attributeKeyboardName">Name of the attribute keyboard.</param>
            <returns>Keyboard.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetMarginForRuntimePlatform">
            <summary>
            Gets the margin for runtime platform.
            </summary>
            <returns>Thickness.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetShapeView">
            <summary>
            Gets the shape view.
            </summary>
            <returns>ShapeView.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetSimpleLabel(System.String,Xamarin.Forms.Color,Xamarin.Forms.TextAlignment,Xamarin.Forms.NamedSize,System.Double,Xamarin.Forms.FontAttributes,System.Double,System.Double,System.String,System.Object,System.String,Xamarin.Forms.LineBreakMode,System.String)">
            <summary>
            Gets the simple label.
            </summary>
            <param name="labelText">The label text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="fontNamedSize">Size of the font named.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontAttributes">The font attributes.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="labelBindingPropertyName">Name of the label binding property.</param>
            <param name="labelBindingSource">The label binding source.</param>
            <param name="stringFormat">The string format.</param>
            <param name="breakMode">The break mode.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetSpacer(System.Double)">
            <summary>
            Gets the spacer.
            </summary>
            <param name="height">The height.</param>
            <returns>BoxView.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetStartingYForRuntimePlatform">
            <summary>
            Gets the starting y for runtime platform.
            </summary>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.HaveBecomeInvalid(Xamarin.Forms.Rectangle,System.String,Xamarin.Forms.Rectangle)">
            <summary>
            The bounds have become *invalid* (not changed necessarily) in relation to the last known bounds.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="propName">Name of the property.</param>
            <param name="lastBounds">The last bounds.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.HaveBecomeInvalidOrChangedWithoutPermission(Xamarin.Forms.Rectangle,System.String,Xamarin.Forms.Rectangle)">
            <summary>
            The bounds have become *invalid* OR *changed* in relation to the last known bounds.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="propName">Name of the property.</param>
            <param name="lastBounds">The last bounds.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.HeightFromPercentOfScreenHeight(System.Double)">
            <summary>
            Heights the height of from percent of screen.
            </summary>
            <param name="percentDesired">The percent desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.HorizontalOptionsFromTextAlignment(Xamarin.Forms.TextAlignment)">
            <summary>
            Horizontals the options from text alignment.
            </summary>
            <param name="textAlignment">The text alignment.</param>
            <returns>LayoutOptions.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.InsertAutoColumn(Xamarin.Forms.Grid,System.Int32)">
            <summary>
            Inserts the automatic column.
            </summary>
            <param name="grid">The grid.</param>
            <param name="insertionLoc">The insertion loc.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsBoundsRelatedPropertyChange(System.String)">
            <summary>
            Determines whether [is bounds related property change] [the specified property name].
            </summary>
            <param name="propName">Name of the property.</param>
            <returns><c>true</c> if [is bounds related property change] [the specified property name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsDifferentThan(Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Determines whether [is different than] [the specified second color].
            </summary>
            <param name="color">The color.</param>
            <param name="secondColor">Color of the second.</param>
            <returns><c>true</c> if [is different than] [the specified second color]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsDifferentThan(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <summary>
            Determines whether [is different than] [the specified other size].
            </summary>
            <param name="size">The size.</param>
            <param name="otherSize">Size of the other.</param>
            <returns><c>true</c> if [is different than] [the specified other size]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsDifferentThan(Xamarin.Forms.Thickness,Xamarin.Forms.Thickness)">
            <summary>
            Determines whether [is different than] [the specified other thickness].
            </summary>
            <param name="Thickness">The thickness.</param>
            <param name="otherThickness">The other thickness.</param>
            <returns><c>true</c> if [is different than] [the specified other thickness]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsDifferentThan(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <summary>
            Determines whether [is different than] [the specified other rect].
            </summary>
            <param name="mainRect">The main rect.</param>
            <param name="otherRect">The other rect.</param>
            <returns><c>true</c> if [is different than] [the specified other rect]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsEmpty(Xamarin.Forms.Size)">
            <summary>
            Determines whether the specified size is empty.
            </summary>
            <param name="size">The size.</param>
            <returns><c>true</c> if the specified size is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsEmpty(Xamarin.Forms.Thickness)">
            <summary>
            Determines whether the specified thickness is empty.
            </summary>
            <param name="Thickness">The thickness.</param>
            <returns><c>true</c> if the specified thickness is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsEmpty(Xamarin.Forms.Rectangle)">
            <summary>
            Determines whether the specified main rect is empty.
            </summary>
            <param name="mainRect">The main rect.</param>
            <returns><c>true</c> if the specified main rect is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsIos">
            <summary>
            Determines whether this instance is ios.
            </summary>
            <returns><c>true</c> if this instance is ios; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsNotEmpty(Xamarin.Forms.Size)">
            <summary>
            Determines whether [is not empty] [the specified size].
            </summary>
            <param name="size">The size.</param>
            <returns><c>true</c> if [is not empty] [the specified size]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsNotEmpty(Xamarin.Forms.Thickness)">
            <summary>
            Determines whether [is not empty] [the specified thickness].
            </summary>
            <param name="Thickness">The thickness.</param>
            <returns><c>true</c> if [is not empty] [the specified thickness]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsNotEmpty(Xamarin.Forms.Rectangle)">
            <summary>
            Determines whether [is not empty] [the specified main rect].
            </summary>
            <param name="mainRect">The main rect.</param>
            <returns><c>true</c> if [is not empty] [the specified main rect]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsNotValid(Xamarin.Forms.Rectangle)">
            <summary>
            Determines whether [is not valid] [the specified bounds].
            </summary>
            <param name="bounds">The bounds.</param>
            <returns><c>true</c> if [is not valid] [the specified bounds]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsNotVisible(Xamarin.Forms.View)">
            <summary>
            Determines whether [is not visible] [the specified view].
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if [is not visible] [the specified view]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsSameAs(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <summary>
            Determines whether [is same as] [the specified other size].
            </summary>
            <param name="size">The size.</param>
            <param name="otherSize">Size of the other.</param>
            <returns><c>true</c> if [is same as] [the specified other size]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsSameAs(Xamarin.Forms.Thickness,Xamarin.Forms.Thickness)">
            <summary>
            Determines whether [is same as] [the specified other thickness].
            </summary>
            <param name="Thickness">The thickness.</param>
            <param name="otherThickness">The other thickness.</param>
            <returns><c>true</c> if [is same as] [the specified other thickness]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsSameAs(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <summary>
            Determines whether [is same as] [the specified other rect].
            </summary>
            <param name="mainRect">The main rect.</param>
            <param name="otherRect">The other rect.</param>
            <returns><c>true</c> if [is same as] [the specified other rect]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsUnsetOrDefault(Xamarin.Forms.Color)">
            <summary>
            Determines whether [is unset or default] [the specified color].
            </summary>
            <param name="color">The color.</param>
            <returns><c>true</c> if [is unset or default] [the specified color]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsValid(Xamarin.Forms.Rectangle)">
            <summary>
            Returns true if ... is valid.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns><c>true</c> if the specified bounds is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsValid(Xamarin.Forms.Size)">
            <summary>
            Returns true if ... is valid.
            </summary>
            <param name="size">The size.</param>
            <returns><c>true</c> if the specified size is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.IsValid(Xamarin.Forms.Color)">
            <summary>
            Returns true if ... is valid.
            </summary>
            <param name="color">The color.</param>
            <returns><c>true</c> if the specified color is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.MergeStyle``1(Xamarin.Forms.Style,Xamarin.Forms.Style)">
            <summary>
            Merges the style.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainStyle">The main style.</param>
            <param name="newStyle">The new style.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.PresentableDate(System.DateTime)">
            <summary>
            Presentables the date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.PresentableDollarAmount(System.Double)">
            <summary>
            Presentables the dollar amount.
            </summary>
            <param name="dollars">The dollars.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.PresentableWholeLongInt(System.Int64)">
            <summary>
            Presentables the whole long int.
            </summary>
            <param name="lng">The LNG.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ReplaceLayoutTo(Xamarin.Forms.View,Xamarin.Forms.Rectangle,System.UInt32,Xamarin.Forms.Easing)">
            <summary>
            Replaces the layout to.
            </summary>
            <param name="view">The view.</param>
            <param name="nextBounds">The next bounds.</param>
            <param name="fadeMilliseconds">The fade milliseconds.</param>
            <param name="easing">The easing.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ScaleIn(Xamarin.Forms.View)">
            <summary>
            Scales the in.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ScaleOut(Xamarin.Forms.View)">
            <summary>
            Scales the out.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.SetAndForceStyle(Xamarin.Forms.View,Xamarin.Forms.Style)">
            <summary>
            Sets the and force style.
            </summary>
            <param name="view">The view.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.SetChildViewInputTransparencies(Xamarin.Forms.View)">
            <summary>
            This method assumes on entry, the first view has a gesture recognizer (else exits).
            From there, the child view Input Transparent Booeans are set so the first view's gesture recognizer is active at all
            times, regardless of where the user taps.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.SetDefaults(Com.MarcusTS.SharedForms.Views.Controls.ShapeView)">
            <summary>
            Sets the defaults.
            </summary>
            <param name="shapeView">The shape view.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ToEnum``1(System.String)">
            <summary>
            Converts to enum.
            </summary>
            <typeparam name="EnumT">The type of the enum t.</typeparam>
            <param name="enumAsString">The enum as string.</param>
            <returns>EnumT.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ToOffScreenPosition(Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions)">
            <summary>
            Converts to off screen position.
            </summary>
            <param name="stageToolbarPosition">The stage toolbar position.</param>
            <returns>OffScreenPositions.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ToOffScreenPosition(Com.MarcusTS.SharedForms.Common.Utils.FormsConst.SubStageFlowDirections)">
            <summary>
            Converts to offscreenposition.
            </summary>
            <param name="flowDirection">The flow direction.</param>
            <returns>FormsConst.OffScreenPositions.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ToOnScreenPosition(Com.MarcusTS.SharedForms.Common.Utils.FormsConst.StageToolbarPositions)">
            <summary>
            Converts to onscreenposition.
            </summary>
            <param name="stageToolbarPosition">The stage toolbar position.</param>
            <returns>OnScreenPositions.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ToOptions(Xamarin.Forms.LayoutAlignment)">
            <summary>
            Converts to options.
            </summary>
            <param name="alignment">The alignment.</param>
            <returns>LayoutOptions.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.WidthFromPercentOfScreenWidth(System.Double)">
            <summary>
            Widthes the width of from percent of screen.
            </summary>
            <param name="percentDesired">The percent desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.WithoutChangingContext(System.Threading.Tasks.Task)">
            <summary>
            Runs a Task without changing the context (configure await is false).
            </summary>
            <param name="task">The task.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.WithoutChangingContext``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Withouts the changing context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">The task.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetForcedHeight(System.Double,System.Boolean,Xamarin.Forms.Size)">
            <summary>
            Gets the height of the forced.
            </summary>
            <param name="height">The height.</param>
            <param name="forceLongSize">if set to <c>true</c> [force long size].</param>
            <param name="currentSize">Size of the current.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.GetForcedWidth(System.Double,System.Boolean,Xamarin.Forms.Size)">
            <summary>
            Gets the width of the forced.
            </summary>
            <param name="width">The width.</param>
            <param name="forceLongSize">if set to <c>true</c> [force long size].</param>
            <param name="currentSize">Size of the current.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.FormsUtils.ValidatorFromView(Xamarin.Forms.View)">
            <summary>
            Validators from view.
            </summary>
            <param name="view">The view.</param>
            <returns>ICanBeValid.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Common.Utils.TaskHelper">
            <summary>
            Class TaskHelper.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.TaskHelper.BeginInvokeOnMainThreadAsync``1(System.Func{``0})">
            <summary>
            Begins the invoke on main thread asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">a.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.TaskHelper.BeginInvokeOnMainThreadAsync(System.Action)">
            <summary>
            Begins the invoke on main thread asynchronous.
            </summary>
            <param name="a">a.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Common.Utils.TaskHelper.RunParallel(System.Threading.Tasks.Task,System.Threading.Tasks.Task,System.Action)">
            <summary>
            Runs the parallel.
            </summary>
            <param name="task">The task.</param>
            <param name="taskCallback">The task callback.</param>
            <param name="actionCallback">The action callback.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel">
            <summary>
            Interface IBindableViewModel
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel">
            <summary>
            Class BindableViewModel.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel" />
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.INotifyItemViewModel">
            <summary>
            Supports a Notify list item.
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.NotifyItemViewModel">
            <summary>
            Class NotifyItemViewModel.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.INotifyItemViewModel" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.INotifyItemViewModel" />
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.NotifyItemViewModel.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.NotifyItemViewModel.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel">
            <summary>
            Interface IStatefulViewModel
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IViewModelBase" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanPullToRefresh" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IViewModelBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.ICanPullToRefresh" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.AnyPropertyValueHasChanged">
            <summary>
            Gets a value indicating whether [any property value has changed].
            </summary>
            <value><c>true</c> if [any property value has changed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.IsRefreshing">
            <summary>
            Gets a value indicating whether this instance is refreshing.
            </summary>
            <value><c>true</c> if this instance is refreshing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.PageCanBeSaved">
            <summary>
            Gets a value indicating whether [page can be saved].
            </summary>
            <value><c>null</c> if [page can be saved] contains no value, <c>true</c> if [page can be saved]; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.PageIsValid">
            <summary>
            Gets a value indicating whether [page is valid].
            </summary>
            <value><c>null</c> if [page is valid] contains no value, <c>true</c> if [page is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.ProceedWithoutPropertyChanges">
            <summary>
            Gets a value indicating whether [proceed without property changes].
            </summary>
            <value><c>true</c> if [proceed without property changes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.AddBehaviors(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior[])">
            <summary>
            Adds the behaviors.
            </summary>
            <param name="behaviors">The behaviors.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.CopyOriginalValuesToLiveValues">
            <summary>
            Copies the original values to live values.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.HandleInputValidationChanged">
            <summary>
            Handles the input validation changed.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.RevalidateBehaviors">
            <summary>
            Revalidates the behaviors.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.RevertToFailSafeOriginalValues">
            <summary>
            Reverts to fail safe original values.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel.SaveLiveValuesBackToOriginalValues">
            <summary>
            Saves the live values back to original values.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2">
            <summary>
            A view model specialized at inputting and saving values.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel" />
            </summary>
            <typeparam name="InterfaceT">The type of interface storing the savable values -
            can be the entire original view model or a sub-set.</typeparam>
            <typeparam name="ClassT">The type of class to be instantiated to create saved values.</typeparam>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IStatefulViewModel" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._behaviors">
            <summary>
            The behaviors
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._cachedPropInfos">
            <summary>
            The cached property infos
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._anyPropertyValueHasChanged">
            <summary>
            Any property value has changed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._isInitialized">
            <summary>
            The is initialized
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._originalValues">
            <summary>
            The original values
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._pageCanBeSaved">
            <summary>
            The page can be saved
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._pageIsValid">
            <summary>
            The page is valid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._revertableOriginalValues">
            <summary>
            The revertable original values
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._startUpEntered">
            <summary>
            The start up entered
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2._viewModel">
            <summary>
            The view model
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.ThisAsInterfaceT">
            <summary>
            Gets the this as interface t.
            </summary>
            <value>The this as interface t.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.AnyPropertyValueHasChanged">
            <summary>
            Gets a value indicating whether [any property value has changed].
            </summary>
            <value><c>true</c> if [any property value has changed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.IsRefreshing">
            <summary>
            Gets a value indicating whether this instance is refreshing.
            </summary>
            <value><c>true</c> if this instance is refreshing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.PageCanBeSaved">
            <summary>
            Gets or sets a value indicating whether [page can be saved].
            </summary>
            <value><c>null</c> if [page can be saved] contains no value, <c>true</c> if [page can be saved]; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.PageIsValid">
            <summary>
            Gets or sets a value indicating whether [page is valid].
            </summary>
            <value><c>null</c> if [page is valid] contains no value, <c>true</c> if [page is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.ProceedWithoutPropertyChanges">
            <summary>
            If true, we will allow the user to "save" even if no change has taken place.
            The default is false.
            </summary>
            <value><c>true</c> if [proceed without property changes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.RefreshDataCommand">
            <summary>
            Gets the refresh data command.
            </summary>
            <value>The refresh data command.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.AddBehaviors(Com.MarcusTS.SharedForms.Common.Behaviors.IEntryValidationBehavior[])">
            <summary>
            The deriver can add behaviors as properties, but *MUST* add them here so they
            will validate - !!!
            </summary>
            <param name="behaviors">The behaviors.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.CopyOriginalValuesToLiveValues">
            <summary>
            Copies the original values to live values.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.HandleInputValidationChanged">
            <summary>
            Handles the input validation changed.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.RevalidateBehaviors">
            <summary>
            Revalidates the behaviors.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.RevertToFailSafeOriginalValues">
            <summary>
            Copy the safe-safe original values back to the original values,
            then re-validate.  This is called when we have already destroyed the
            state of the original values at an attempt to save, but then failed to save.
            It restores the state of the UI based on differences between the "live" values
            and the *real* original values (before edit and save).
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.SaveLiveValuesBackToOriginalValues">
            <summary>
            Saves the live values back to original values.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.ASinglePropertyHasChanged(System.String)">
            <summary>
            as the single property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.InitializeOriginalValues(`0)">
            <summary>
            REQUIRED at the deriving constructor !!!
            </summary>
            <param name="originalValues">The original values.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.OnAnyPropertyValueHasChanged">
            <summary>
            Called when [any property value has changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.RaiseForceRefreshUIView">
            <summary>
            Raises the force refresh UI view.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.RefreshData">
            <summary>
            Refreshes the data.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.RefreshDataAndOverwriteExisting">
            <summary>
            Refreshes the data and overwrite existing.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.ResetPageCanBeSaved">
            <summary>
            Resets the page can be saved.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.ResetAnyPropertyValueHasChanged">
            <summary>
            Resets any property value has changed.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.SetUpFodyPropertyChangedListener(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Sets up fody property changed listener.
            </summary>
            <param name="propExpression">The property expression.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.StartUpStatefulViewModel">
            <summary>
            Starts up stateful view model.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.StatefulViewModelBase`2.ViewModelOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Views the model on property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyChangedEventArgs">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel">
            <summary>
            Interface ITypeCollectionViewModel
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel" />
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.DeselectedIconPath">
            <summary>
            Gets the deselected icon path.
            </summary>
            <value>The deselected icon path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.NewRecordButtonText">
            <summary>
            Creates new recordbuttontext.
            </summary>
            <value>The new record button text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.RecordTextBindingName">
            <summary>
            Gets the name of the record text binding.
            </summary>
            <value>The name of the record text binding.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.SelectedIconPath">
            <summary>
            Gets the selected icon path.
            </summary>
            <value>The selected icon path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.ViewModels">
            <summary>
            Gets or sets the view models.
            </summary>
            <value>The view models.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.RecordAddedOrDeleted">
            <summary>
            Occurs when [record added or deleted].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.AddNewRecord">
            <summary>
            Adds the new record.
            </summary>
            <returns>IHaveValidationViewModelHelper.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.DeleteRecord(System.Object)">
            <summary>
            Deletes the record.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.ImportRecords(Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper[])">
            <summary>
            Imports the records.
            </summary>
            <param name="records">The records.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel.SortTheCollection">
            <summary>
            Sorts the collection.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1">
            <summary>
            Class TypeCollectionViewModelBase.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel" />
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.ITypeCollectionViewModel" />
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.RecordAddedOrDeleted">
            <summary>
            Occurs when [record added or deleted].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.DeselectedIconPath">
            <summary>
            Gets the deselected icon path.
            </summary>
            <value>The deselected icon path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.NewRecordButtonText">
            <summary>
            Creates new recordbuttontext.
            </summary>
            <value>The new record button text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.RecordTextBindingName">
            <summary>
            Gets the name of the record text binding.
            </summary>
            <value>The name of the record text binding.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.SelectedIconPath">
            <summary>
            Gets the selected icon path.
            </summary>
            <value>The selected icon path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.ValidationHelper">
            <summary>
            Gets or sets the validation helper.
            </summary>
            <value>The validation helper.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.ViewModels">
            <summary>
            Gets or sets the view models.
            </summary>
            <value>The view models.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.AddNewRecord">
            <summary>
            Adds the new record.
            </summary>
            <returns>IHaveValidationViewModelHelper.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.DeleteRecord(System.Object)">
            <summary>
            Deletes the record.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.ImportRecords(Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper[])">
            <summary>
            Imports the records.
            </summary>
            <param name="records">The records.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.SortTheCollection">
            <summary>
            Sorts the collection.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.CreateNewRecord">
            <summary>
            Creates the new record.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.AddRecordToViewModel(`0)">
            <summary>
            Adds the record to view model.
            </summary>
            <param name="newRecord">The new record.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.TypeCollectionViewModelBase`1.ResetPageIsValid">
            <summary>
            Resets the page is valid.
            </summary>
            <returns>EventUtils.GenericDelegate&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper">
            <summary>
            Interface IHaveValidationViewModelHelper
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper.ValidationHelper">
            <summary>
            Gets or sets the validation helper.
            </summary>
            <value>The validation helper.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper">
            <summary>
            Interface IValidationViewModelHelper
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IBindableViewModel" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.AnyPropertyValueHasChanged">
            <summary>
            Gets a value indicating whether [any property value has changed].
            </summary>
            <value><c>true</c> if [any property value has changed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.MultipleSubHelpersMustAllValidateTrue">
            <summary>
            Gets or sets a value indicating whether [multiple sub helpers must all validate true].
            </summary>
            <value><c>true</c> if [multiple sub helpers must all validate true]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.PageIsNeverValid">
            <summary>
            Gets or sets a value indicating whether [page is never valid].
            </summary>
            <value><c>true</c> if [page is never valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.PageIsValid">
            <summary>
            Gets a value indicating whether [page is valid].
            </summary>
            <value><c>true</c> if [page is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.ProceedWithoutPropertyChanges">
            <summary>
            Gets a value indicating whether [proceed without property changes].
            </summary>
            <value><c>true</c> if [proceed without property changes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.ValidatesTrueWhenEmpty">
            <summary>
            Gets or sets a value indicating whether [validates true when empty].
            </summary>
            <value><c>true</c> if [validates true when empty]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.PageIsValidChanged">
            <summary>
            Occurs when [page is valid changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.AddBehaviors(Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid[])">
            <summary>
            Adds the behaviors.
            </summary>
            <param name="behaviors">The behaviors.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.AddSubViewModelHelpers(Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper[])">
            <summary>
            Adds the sub view model helpers.
            </summary>
            <param name="helpers">The helpers.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.GetBehaviors">
            <summary>
            Gets the behaviors.
            </summary>
            <returns>ICanBeValid[].</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.KillBehaviors">
            <summary>
            Kills the behaviors.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.RemoveSubViewModelHelpers(Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper[])">
            <summary>
            Removes the sub view model helpers.
            </summary>
            <param name="helpers">The helpers.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.RevalidateBehaviors(System.Boolean)">
            <summary>
            Revalidates the behaviors.
            </summary>
            <param name="forceAll">if set to <c>true</c> [force all].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper.RevalidateBehaviors">
            <summary>
            Revalidates the behaviors.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper">
            <summary>
            Class ValidationViewModelHelper.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.BindableViewModel" />
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IValidationViewModelHelper" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper._behaviors">
            <summary>
            The behaviors
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper._subViewModelHelpers">
            <summary>
            The sub view model helpers
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper._anyPropertyValueHasChanged">
            <summary>
            Any property value has changed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper._pageIsNeverValid">
            <summary>
            The page is never valid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper._pageIsValid">
            <summary>
            The page is valid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper._revalidateBehaviorsEntered">
            <summary>
            The revalidate behaviors entered
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper" /> class.
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.PageIsValidChanged">
            <summary>
            Occurs when [page is valid changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.AnyPropertyValueHasChanged">
            <summary>
            Gets a value indicating whether [any property value has changed].
            </summary>
            <value><c>true</c> if [any property value has changed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.MultipleSubHelpersMustAllValidateTrue">
            <summary>
            Gets or sets a value indicating whether [multiple sub helpers must all validate true].
            </summary>
            <value><c>true</c> if [multiple sub helpers must all validate true]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.PageIsNeverValid">
            <summary>
            Gets or sets a value indicating whether [page is never valid].
            </summary>
            <value><c>true</c> if [page is never valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.PageIsValid">
            <summary>
            Gets or sets a value indicating whether [page is valid].
            </summary>
            <value><c>true</c> if [page is valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.ProceedWithoutPropertyChanges">
            <summary>
            Gets or sets a value indicating whether [proceed without property changes].
            </summary>
            <value><c>true</c> if [proceed without property changes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.ValidatesTrueWhenEmpty">
            <summary>
            Gets or sets a value indicating whether [validates true when empty].
            </summary>
            <value><c>true</c> if [validates true when empty]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.AddBehaviors(Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid[])">
            <summary>
            Adds the behaviors.
            </summary>
            <param name="behaviors">The behaviors.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.AddSubViewModelHelpers(Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper[])">
            <summary>
            Adds the sub view model helpers.
            </summary>
            <param name="helpers">The helpers.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.GetBehaviors">
            <summary>
            Gets the behaviors.
            </summary>
            <returns>ICanBeValid[].</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.KillBehaviors">
            <summary>
            Kills the behaviors.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.RemoveSubViewModelHelpers(Com.MarcusTS.SharedForms.ViewModels.IHaveValidationViewModelHelper[])">
            <summary>
            Removes the sub view model helpers.
            </summary>
            <param name="helpers">The helpers.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.RevalidateBehaviors(System.Boolean)">
            <summary>
            Revalidates the behaviors.
            </summary>
            <param name="forceAll">if set to <c>true</c> [force all].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.RevalidateBehaviors">
            <summary>
            Revalidates the behaviors.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ValidationViewModelHelper.OnAnyPropertyValueHasChanged">
            <summary>
            Called when [any property value has changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.IViewModelBase">
            <summary>
            Interface IViewModelBase
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy" />
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IAmBusy" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase">
            <summary>
            The base class for all view models
            Implements the <see cref="T:Com.MarcusTS.SharedForms.ViewModels.IViewModelBase" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.ViewModels.IViewModelBase" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase._isBusy">
            <summary>
            The is busy
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase.IsBusyChanged">
            <summary>
            Occurs when [is busy changed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase.IsBusy">
            <summary>
            Gets or sets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase.IsBusyMessage">
            <summary>
            Gets the is busy message.
            </summary>
            <value>The is busy message.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.ViewModels.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox">
            <summary>
            Interface ICustomCheckBox
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox" /> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox.WidthHeight">
            <summary>
            Gets or sets the height of the width.
            </summary>
            <value>The height of the width.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox.IsCheckedChanged">
            <summary>
            Occurs when [checked changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox">
            <summary>
            Class CustomCheckBox.
            Implements the <see cref="T:Xamarin.Forms.Image" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox" />
            <seealso cref="T:Xamarin.Forms.Image" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICustomCheckBox" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.CHECKBOX_CHECKED_IMAGE">
            <summary>
            The checkbox checked image
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.CHECKBOX_UN_CHECKED_IMAGE">
            <summary>
            The checkbox un checked image
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.DEFAULT_WIDTH_HEIGHT">
            <summary>
            The default width height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsCheckedProperty">
            <summary>
            The is checked property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox._widthHeight">
            <summary>
            The width height
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox" /> class.
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsCheckedChanged">
            <summary>
            The checked changed event.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox" /> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.WidthHeight">
            <summary>
            Gets or sets the height of the width.
            </summary>
            <value>The height of the width.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.CreateCheckBoxBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox,``0,``0})">
            <summary>
            Creates the CheckBox bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.ImageTapGestureOnTapped(System.Object,System.EventArgs)">
            <summary>
            Images the tap gesture on tapped.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the <see cref="E:PropertyChanged" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsCheckedToImageSourceConverter">
            <summary>
            Class IsCheckedToImageSourceConverter.
            Implements the <see cref="T:Xamarin.Forms.IValueConverter" />
            </summary>
            <seealso cref="T:Xamarin.Forms.IValueConverter" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsCheckedToImageSourceConverter.StaticIsCheckedToImageSourceConverter">
            <summary>
            The static is checked to image source converter
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsCheckedToImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implement this method to convert <paramref name="value" /> to <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to which to convert the value.</param>
            <param name="parameter">A parameter to use during the conversion.</param>
            <param name="culture">The culture to use during the conversion.</param>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.CustomCheckBox.IsCheckedToImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.CustomEntry">
            <summary>
            Class CustomEntry.
            Implements the <see cref="T:Xamarin.Forms.Entry" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Entry" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses">
            <summary>
            Enum DashboardStatuses
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses.Normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses.Important">
            <summary>
            The important
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses.Critical">
            <summary>
            The critical
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IDashboardStatusToggleImageLabelButton">
            <summary>
            Interface IDashboardStatusToggleImageLabelButton
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton&lt;Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton&lt;Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.DashboardStatusToggleImageLabelButton">
            <summary>
            Class DashboardStatusToggleImageLabelButton.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase&lt;Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase&lt;Com.MarcusTS.SharedForms.Views.Controls.DashboardStatuses&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IEnumPicker">
            <summary>
            Interface IEnumPicker
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumPicker.CurrentEnum">
            <summary>
            Gets or sets the current enum.
            </summary>
            <value>The current enum.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker">
            <summary>
            Class EnumPicker.
            Implements the <see cref="T:Xamarin.Forms.Picker" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IEnumPicker" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Picker" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IEnumPicker" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker.CurrentEnumProperty">
            <summary>
            The current enum property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker._enumType">
            <summary>
            The enum type
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker.#ctor(System.Type,System.String,System.String,Xamarin.Forms.Behavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker" /> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="currentEnumBindingPropertyName">Name of the current enum binding property.</param>
            <param name="currentEnumStrBindingPropertyName">Name of the current enum string binding property.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker.CurrentEnum">
            <summary>
            Gets or sets the current enum.
            </summary>
            <value>The current enum.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker.CreateEnumPickerBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.EnumPicker,``0,``0})">
            <summary>
            Creates the enum picker bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker.HandleSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the selected index changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumPicker.ResetSelectedIndex">
            <summary>
            Resets the index of the selected.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1">
            <summary>
            Interface IEnumToggleImageLabelButton
            </summary>
            <typeparam name="EnumT">The type of the enum t.</typeparam>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.ButtonBackColor">
            <summary>
            Gets or sets the color of the button back.
            </summary>
            <value>The color of the button back.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.ButtonBorderColor">
            <summary>
            Gets or sets the color of the button border.
            </summary>
            <value>The color of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.ButtonBorderWidth">
            <summary>
            Gets or sets the width of the button border.
            </summary>
            <value>The width of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.CurrentSelection">
            <summary>
            Gets or sets the current selection.
            </summary>
            <value>The current selection.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.LabelFontAttributes">
            <summary>
            Gets or sets the label font attributes.
            </summary>
            <value>The label font attributes.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.LabelFontSize">
            <summary>
            Gets or sets the size of the label font.
            </summary>
            <value>The size of the label font.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1.LabelTextColor">
            <summary>
            Gets or sets the color of the label text.
            </summary>
            <value>The color of the label text.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1">
            <summary>
            Class EnumToggleImageLabelButtonBase.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1" />
            </summary>
            <typeparam name="EnumT">The type of the enum t.</typeparam>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton`1" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_BUTTON_BACK_COLOR">
            <summary>
            The default button back color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_BUTTON_BORDER_COLOR">
            <summary>
            The default button border color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_BUTTON_BORDER_WIDTH">
            <summary>
            The default button border width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_LABEL_FONT_ATTRIBUTES">
            <summary>
            The default label font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_LABEL_FONT_SIZE">
            <summary>
            The default label font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_LABEL_TEXT_COLOR">
            <summary>
            The default label text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.DEFAULT_IMAGE_SUFFIX">
            <summary>
            The default image suffix
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ButtonBackColorProperty">
            <summary>
            The button back color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ButtonBorderColorProperty">
            <summary>
            The button border color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ButtonBorderWidthProperty">
            <summary>
            The button border width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CurrentSelectionProperty">
            <summary>
            The current selection property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.LabelFontAttributesProperty">
            <summary>
            The label font attributes property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.LabelFontSizeProperty">
            <summary>
            The label font size property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.LabelTextColorProperty">
            <summary>
            The label text color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._isInitializing">
            <summary>
            The is initializing
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._buttonBackColor">
            <summary>
            The button back color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._buttonBorderColor">
            <summary>
            The button border color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._buttonBorderWidth">
            <summary>
            The button border width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._imageLabelButtonStyles">
            <summary>
            The image label button styles
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._labelFontAttributes">
            <summary>
            The label font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._labelFontSize">
            <summary>
            The label font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1._labelTextColor">
            <summary>
            The label text color
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ImageLabelButtonStyles">
            <summary>
            Gets the image label button styles.
            </summary>
            <value>The image label button styles.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.UpdateButtonTextFromStyle">
            <summary>
            Required by this case; each style has its own text.
            </summary>
            <value><c>true</c> if [update button text from style]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ButtonBackColor">
            <summary>
            Gets or sets the color of the button back.
            </summary>
            <value>The color of the button back.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ButtonBorderColor">
            <summary>
            Gets or sets the color of the button border.
            </summary>
            <value>The color of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.ButtonBorderWidth">
            <summary>
            Gets or sets the width of the button border.
            </summary>
            <value>The width of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CurrentSelection">
            <summary>
            Gets or sets the current selection.
            </summary>
            <value>The current selection.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.LabelFontAttributes">
            <summary>
            Gets or sets the label font attributes.
            </summary>
            <value>The label font attributes.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.LabelFontSize">
            <summary>
            Gets or sets the size of the label font.
            </summary>
            <value>The size of the label font.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.LabelTextColor">
            <summary>
            Gets or sets the color of the label text.
            </summary>
            <value>The color of the label text.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.EnumToggleImageLabelButtonBaseBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase{`0},``0,``0})">
            <summary>
            Enums the toggle image label button base bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.AfterButtonStateChanged">
            <summary>
            Called when [button state changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CreateButtonStyle(`0,System.String)">
            <summary>
            Creates the button style.
            </summary>
            <param name="enumVal">The enum value.</param>
            <param name="enumString">The enum string.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CreateImageFilePath(`0,System.String)">
            <summary>
            Creates the image file path.
            </summary>
            <param name="enumVal">The enum value.</param>
            <param name="enumString">The enum string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CreateLabelButtonText(`0,System.String)">
            <summary>
            Creates the label button text.
            </summary>
            <param name="enumVal">The enum value.</param>
            <param name="enumString">The enum string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CreateLabelStyle(`0,System.String)">
            <summary>
            Creates the label style.
            </summary>
            <param name="enumVal">The enum value.</param>
            <param name="enumString">The enum string.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.CreateImageLabelButtonStyles">
            <summary>
            Creates the image label button styles.
            </summary>
            <returns>IList&lt;ImageLabelButtonStyle&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.RefreshImageLabelButtonStyles">
            <summary>
            Refreshes the image label button styles.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase`1.SetCurrentStyleByEnum(`0)">
            <summary>
            Sets the current style by enum.
            </summary>
            <param name="newVal">The new value.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1">
            <summary>
            Class FlexibleStack.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1._items">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the
            collection.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.Peek">
            <summary>
            Peeks this instance.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.Pop">
            <summary>
            Pops this instance.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.Push(`0)">
            <summary>
            Pushes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.RemoveIfPresent(`0,System.Predicate{`0})">
            <summary>
            Removes if present.
            </summary>
            <param name="item">The item.</param>
            <param name="dupTest">The dup test.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.FlexibleStack`1.PopOrPeek(System.Boolean)">
            <summary>
            Pops the or peek.
            </summary>
            <param name="removeIt">if set to <c>true</c> [remove it].</param>
            <returns>T.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonSelectionStyles">
            <summary>
            Enum SelectionStyles
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonSelectionStyles.NoSelection">
            <summary>
            The no selection
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonSelectionStyles.SelectionButNoToggleAsFirstTwoStyles">
            <summary>
            The selection but no toggle as first two styles
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonSelectionStyles.ToggleSelectionAsFirstTwoStyles">
            <summary>
            Toggles selection between the first and second styles ONLY.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonSelectionStyles.ToggleSelectionThroughAllStyles">
            <summary>
            Toggles selection through all styles.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton">
            <summary>
            Interface IImageLabelButton Implements the <see cref="T:System.IDisposable" /> Implements the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IReportButtonStateChanges" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IReportButtonStateChanges" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.AnimateButton">
            <summary>
            Gets or sets a value indicating whether [animate button].
            </summary>
            <value><c>true</c> if [animate button]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCommand">
            <summary>
            Gets or sets the button command.
            </summary>
            <value>The button command.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCommandBindingName">
            <summary>
            Gets or sets the name of the button command binding.
            </summary>
            <value>The name of the button command binding.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCommandConverter">
            <summary>
            Gets or sets the button command converter.
            </summary>
            <value>The button command converter.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCommandConverterParameter">
            <summary>
            Gets or sets the button command converter parameter.
            </summary>
            <value>The button command converter parameter.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCommandSource">
            <summary>
            Gets or sets the button command source.
            </summary>
            <value>The button command source.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCommandStringFormat">
            <summary>
            Gets or sets the button command string format.
            </summary>
            <value>The button command string format.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCornerRadiusFactor">
            <summary>
            Gets or sets the button corner radius factor.
            </summary>
            <value>The button corner radius factor.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonCornerRadiusFixed">
            <summary>
            Gets or sets the button corner radius fixed.
            </summary>
            <value>The button corner radius fixed.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonImage">
            <summary>
            Gets or sets the button image.
            </summary>
            <value>The button image.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonLabel">
            <summary>
            Gets or sets the button label.
            </summary>
            <value>The button label.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ButtonState">
            <summary>
            Gets or sets the state of the button.
            </summary>
            <value>The state of the button.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.CannotTap">
            <summary>
            Gets or sets a value indicating whether [cannot tap].
            </summary>
            <value><c>true</c> if [cannot tap]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.CanTapOnDisabled">
            <summary>
            Gets or sets a value indicating whether this instance can tap on disabled.
            </summary>
            <value><c>true</c> if this instance can tap on disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.CurrentStyle">
            <summary>
            Gets or sets the current style.
            </summary>
            <value>The current style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ImageLabelButtonStyles">
            <summary>
            Gets the image label button styles.
            </summary>
            <value>The image label button styles.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ImagePos">
            <summary>
            Gets or sets the image position.
            </summary>
            <value>The image position.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.IncludeHapticFeedback">
            <summary>
            Gets or sets a value indicating whether [include haptic feedback].
            </summary>
            <value><c>true</c> if [include haptic feedback]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.LabelPos">
            <summary>
            Gets or sets the label position.
            </summary>
            <value>The label position.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.SelectionGroup">
            <summary>
            Gets or sets the selection group.
            </summary>
            <value>The selection group.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.SelectionStyle">
            <summary>
            Gets or sets the selection style.
            </summary>
            <value>The selection style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.UpdateButtonTextFromStyle">
            <summary>
            Gets a value indicating whether [update button text from style].
            </summary>
            <value><c>true</c> if [update button text from style]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.ImageLabelButtonPressed">
            <summary>
            Occurs when [button state changed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton.IsEnabledChanged">
            <summary>
            Occurs when [is enabled changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IReportButtonStateChanges">
            <summary>
            Interface IReportButtonStateChanges
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.IReportButtonStateChanges.ButtonStateChanged">
            <summary>
            Occurs when [button state changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase">
            <summary>
            A button that can contain either an image and/or a label. Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" />
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.AnimateButtonProperty">
            <summary>
            The animate button property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandBindingNameProperty">
            <summary>
            The button command binding name property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandConverterParameterProperty">
            <summary>
            The button command converter parameter property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandConverterProperty">
            <summary>
            The button command converter property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandProperty">
            <summary>
            The button command property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandStringFormatProperty">
            <summary>
            The button command string format property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonImageProperty">
            <summary>
            The button image property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonLabelProperty">
            <summary>
            The button label property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonStateProperty">
            <summary>
            The button state property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CornerRadiusFactorProperty">
            <summary>
            The corner radius factor property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CornerRadiusFixedProperty">
            <summary>
            The corner radius fixed property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CurrentStyleProperty">
            <summary>
            The current style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImageHeightProperty">
            <summary>
            The image height property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImagePosProperty">
            <summary>
            The image position property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImageWidthProperty">
            <summary>
            The image width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.IncludeHapticFeedbackProperty">
            <summary>
            The include haptic feedback property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.LabelPosProperty">
            <summary>
            The label position property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SelectionGroupProperty">
            <summary>
            The selection group property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SelectionStyleProperty">
            <summary>
            The selection style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._layout">
            <summary>
            The layout
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._tapGesture">
            <summary>
            The tap gesture
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonCommand">
            <summary>
            The button command
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonCommandBindingName">
            <summary>
            The button command binding name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonCommandConverter">
            <summary>
            The button command converter
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonCommandConverterParameter">
            <summary>
            The button command converter parameter
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonCommandSource">
            <summary>
            The button command source
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonImage">
            <summary>
            The button image
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonLabel">
            <summary>
            The button label
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonState">
            <summary>
            The button state
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._buttonStateAssignedFromStyle">
            <summary>
            The button state assigned from style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._cornerRadiusFactor">
            <summary>
            The corner radius factor
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._cornerRadiusFixed">
            <summary>
            The corner radius fixed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._currentStyle">
            <summary>
            The current style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._imageHeight">
            <summary>
            The image height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._imagePos">
            <summary>
            The image position
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._imageWidth">
            <summary>
            The image width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._isInstantiating">
            <summary>
            The is instantiating
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._labelPos">
            <summary>
            The label position
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._lastBounds">
            <summary>
            The last bounds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._selectionGroup">
            <summary>
            The selection group
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._selectionStyle">
            <summary>
            The selection style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase._tappedListenerEntered">
            <summary>
            The tapped listener entered
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImageHeight">
            <summary>
            Gets or sets the height of the image.
            </summary>
            <value>The height of the image.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImageWidth">
            <summary>
            Gets or sets the width of the image.
            </summary>
            <value>The width of the image.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CurrentSizeBestGuess">
            <summary>
            Gets the current size best guess.
            </summary>
            <value>The current size best guess.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.Margin">
            <summary>
            Gets or sets the margin for the view.
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.Padding">
            <summary>
            Gets or sets the inner padding of the Layout.
            </summary>
            <value>The Thickness values for the layout. The default value is a Thickness with all values set to 0.</value>
            <remarks><para>
            The padding is the space between the bounds of a layout and the bounding region into which its children should be arranged into.
            </para>
            <para>
            The following example shows setting the padding of a Layout to inset its children.
            </para>
            <example>
              <code lang="csharp lang-csharp"><![CDATA[
            var stackLayout = new StackLayout {
            Padding = new Thickness (10, 10, 10, 20),
            Children = {
            new Label {Text = "Hello"},
            new Label {Text = "World"}
            }
            }
            ]]></code>
            </example></remarks>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonStateChanged">
            <summary>
            Occurs when [button state changed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImageLabelButtonPressed">
            <summary>
            Occurs when [image label button pressed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.IsEnabledChanged">
            <summary>
            Occurs when [is enabled changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.AnimateButton">
            <summary>
            Gets or sets a value indicating whether [animate button].
            </summary>
            <value><c>true</c> if [animate button]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommand">
            <summary>
            Gets or sets the button command.
            </summary>
            <value>The button command.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandBindingName">
            <summary>
            Gets or sets the name of the button command binding.
            </summary>
            <value>The name of the button command binding.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandConverter">
            <summary>
            Gets or sets the button command converter.
            </summary>
            <value>The button command converter.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandConverterParameter">
            <summary>
            Gets or sets the button command converter parameter.
            </summary>
            <value>The button command converter parameter.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandSource">
            <summary>
            Gets or sets the button command source.
            </summary>
            <value>The button command source.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCommandStringFormat">
            <summary>
            Gets or sets the button command string format.
            </summary>
            <value>The button command string format.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCornerRadiusFactor">
            <summary>
            Gets or sets the button corner radius factor.
            </summary>
            <value>The button corner radius factor.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonCornerRadiusFixed">
            <summary>
            Gets or sets the button corner radius fixed.
            </summary>
            <value>The button corner radius fixed.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonImage">
            <summary>
            Gets or sets the button image.
            </summary>
            <value>The button image.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonLabel">
            <summary>
            Gets or sets the button label.
            </summary>
            <value>The button label.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonState">
            <summary>
            Gets or sets the state of the button.
            </summary>
            <value>The state of the button.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CannotTap">
            <summary>
            Gets or sets a value indicating whether [cannot tap].
            </summary>
            <value><c>true</c> if [cannot tap]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CanTapOnDisabled">
            <summary>
            Gets or sets a value indicating whether this instance can tap on disabled.
            </summary>
            <value><c>true</c> if this instance can tap on disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CurrentStyle">
            <summary>
            Gets or sets the current style.
            </summary>
            <value>The current style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImageLabelButtonStyles">
            <summary>
            Gets the image label button styles.
            </summary>
            <value>The image label button styles.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ImagePos">
            <summary>
            Gets or sets the image position.
            </summary>
            <value>The image position.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.IncludeHapticFeedback">
            <summary>
            Gets or sets a value indicating whether [include haptic feedback].
            </summary>
            <value><c>true</c> if [include haptic feedback]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.LabelPos">
            <summary>
            Gets or sets the label position.
            </summary>
            <value>The label position.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SelectionGroup">
            <summary>
            Gets or sets the selection group.
            </summary>
            <value>The selection group.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SelectionStyle">
            <summary>
            Gets or sets the selection style.
            </summary>
            <value>The selection style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.UpdateButtonTextFromStyle">
            <summary>
            Gets a value indicating whether [update button text from style].
            </summary>
            <value><c>true</c> if [update button text from style]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase" /> class.
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.IAmSelectedStatic">
            <summary>
            Occurs when [i am selected static].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CreateButtonStyle(System.Nullable{Xamarin.Forms.Color},System.Nullable{System.Single},System.Nullable{Xamarin.Forms.Color})">
            <summary>
            Creates the button style.
            </summary>
            <param name="backColor">Color of the back.</param>
            <param name="BorderThickness">Width of the border.</param>
            <param name="borderColor">Color of the border.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CreateLabelStyle(System.Nullable{Xamarin.Forms.Color},System.Nullable{System.Double},System.Nullable{Xamarin.Forms.FontAttributes})">
            <summary>
            Creates the label style.
            </summary>
            <param name="textColor">Color of the text.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontAttributes">The font attributes.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CreateToggleImageLabelButtonBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase,``0,``0})">
            <summary>
            Creates the toggle image label button bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.AfterButtonStateChanged">
            <summary>
            Afters the button state changed.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.AfterContentSet">
            <summary>
            Afters the content set.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.BeforeButtonStateChangedFromStyle(System.String@)">
            <summary>
            Called when [button state changed].
            </summary>
            <param name="newButtonState">New state of the button.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ButtonStateIndexFound(System.String,System.Int32@)">
            <summary>
            Buttons the state index found.
            </summary>
            <param name="buttonStateToFind">The button state to find.</param>
            <param name="styleIdx">Index of the style.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CallRecreateImageSafely">
            <summary>
            Calls the recreate image safely.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.Deselect">
            <summary>
            Deselects this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.HandleTapGestureTapped(System.Object,System.EventArgs)">
            <summary>
            Handles the tap gesture tapped.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <remarks>TODO Cannot avoid async void -- event handler.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.LastCheckBeforeAssigningStyle(Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle)">
            <summary>
            Lasts the check before assigning style.
            </summary>
            <param name="value">The value.</param>
            <returns>ImageLabelButtonStyle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.OnButtonCommandCreated">
            <summary>
            Called when [button command created].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.OnIsEnabledChanged">
            <summary>
            Called when [is enabled changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SetAllStyles">
            <summary>
            Sets all styles.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SetButtonStyle">
            <summary>
            Sets the button style.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SetCurrentStyleByButtonText(System.String)">
            <summary>
            Sets the current style by button text.
            </summary>
            <param name="buttonText">The button text.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SetLabelStyle">
            <summary>
            Sets the label style.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.StartUp">
            <summary>
            Starts up.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ToggleCurrentStyle">
            <summary>
            Converts toggle current style.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.UpdateCurrentStyleFromButtonState(System.String)">
            <summary>
            Updates the state of the current style from button.
            </summary>
            <param name="currentState">State of the current.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.BroadcastIfSelected">
            <summary>
            Broadcasts if selected.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CallStartup">
            <summary>
            Calls the startup.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.CurrentStyleIndexFound(System.Int32@)">
            <summary>
            Currents the style index found.
            </summary>
            <param name="styleIdx">Index of the style.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.HandleButtonCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the button command can execute changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.HandleStaticSelectionChanges(Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton)">
            <summary>
            Handles the static selection changes.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.RecreateImage">
            <summary>
            Recreates the image.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ReleaseUnmanagedResources">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.RemoveButtonCommandEventListener">
            <summary>
            Removes the button command event listener.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SetCornerRadius">
            <summary>
            Sets the corner radius.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.SetUpCompleteButtonCommandBinding">
            <summary>
            Sets up complete button command binding.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.ShareButtonAndLabelPositions">
            <summary>
            Shares the button and label positions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase.UpdateButtonText">
            <summary>
            Updates the button text.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle">
            <summary>
            Interface IImageLabelButtonStyle
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.ButtonStyle">
            <summary>
            Gets or sets the button style.
            </summary>
            <value>The button style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.ButtonText">
            <summary>
            Gets or sets the button text.
            </summary>
            <value>The button text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.GetImageFromResource">
            <summary>
            Gets or sets a value indicating whether [get image from resource].
            </summary>
            <value><c>true</c> if [get image from resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.ImageFilePath">
            <summary>
            Gets or sets the image file path.
            </summary>
            <value>The image file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.ImageResourceClassType">
            <summary>
            Gets or sets the type of the image resource class.
            </summary>
            <value>The type of the image resource class.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.InternalButtonState">
            <summary>
            Gets or sets the state of the internal button.
            </summary>
            <value>The state of the internal button.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle.LabelStyle">
            <summary>
            Gets or sets the label style.
            </summary>
            <value>The label style.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle">
            <summary>
            Class ImageLabelButtonStyle.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButtonStyle" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.ButtonStyle">
            <summary>
            Gets or sets the button style.
            </summary>
            <value>The button style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.ButtonText">
            <summary>
            Gets or sets the button text.
            </summary>
            <value>The button text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.GetImageFromResource">
            <summary>
            Gets or sets a value indicating whether [get image from resource].
            </summary>
            <value><c>true</c> if [get image from resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.ImageFilePath">
            <summary>
            Gets or sets the image file path.
            </summary>
            <value>The image file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.ImageResourceClassType">
            <summary>
            Gets or sets the type of the image resource class.
            </summary>
            <value>The type of the image resource class.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.InternalButtonState">
            <summary>
            Gets or sets the state of the internal button.
            </summary>
            <value>The state of the internal button.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle.LabelStyle">
            <summary>
            Gets or sets the label style.
            </summary>
            <value>The label style.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure">
            <summary>
            Determines if a row or column is the 1st, 3rd, 5th, etc. -- an "odd" numbered row/column. MUST BE RESET each time
            the view model list is reorganized (for rows) or if the collumns are ever re-ordered.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.AutoCalcHeight">
            <summary>
            Gets or sets a value indicating whether [automatic calculate height].
            </summary>
            <value><c>true</c> if [automatic calculate height]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.AutoCalcWidth">
            <summary>
            Gets or sets a value indicating whether [automatic calculate width].
            </summary>
            <value><c>true</c> if [automatic calculate width]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.FixedHeight">
            <summary>
            Gets or sets the height of the fixed.
            </summary>
            <value>The height of the fixed.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.FixedWidth">
            <summary>
            Gets or sets the width of the fixed.
            </summary>
            <value>The width of the fixed.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.MaxMeasureHeight">
            <summary>
            Gets or sets the maximum height of the measure.
            </summary>
            <value>The maximum height of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.MaxMeasureWidth">
            <summary>
            Gets or sets the maximum width of the measure.
            </summary>
            <value>The maximum width of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.MinMeasureHeight">
            <summary>
            Gets or sets the minimum height of the measure.
            </summary>
            <value>The minimum height of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.MinMeasureWidth">
            <summary>
            Gets or sets the minimum width of the measure.
            </summary>
            <value>The minimum width of the measure.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.MeasuredContentSizeChanged">
            <summary>
            Occurs when [measured content size changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure.RemeasureSize">
            <summary>
            Remeasures the size.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveMeasuredContentSize">
            <summary>
            Interface IHaveMeasuredContentSize
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IHaveMeasuredContentSize.MeasuredContentSize">
            <summary>
            Gets or sets the size of the measured content.
            </summary>
            <value>The size of the measured content.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IMeasurableStylableShapeView">
            <summary>
            Interface IMeasurableStylableShapeView
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveCurrentMeasuredContentSizeRequester" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveMeasuredContentSize" />
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanMeasure" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Common.Interfaces.IHaveCurrentMeasuredContentSizeRequester" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveMeasuredContentSize" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView">
            <summary>
            Class MeasurableStylableShapeView.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IMeasurableStylableShapeView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IMeasurableStylableShapeView" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.AutoCalcHeightProperty">
            <summary>
            The automatic calculate height property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.AutoCalcWidthProperty">
            <summary>
            The automatic calculate width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.FixedHeightProperty">
            <summary>
            The fixed height property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.FixedWidthProperty">
            <summary>
            The fixed width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.IsSelectedProperty">
            <summary>
            The is selected property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MaxMeasureHeightProperty">
            <summary>
            The maximum measure height property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MaxMeasureWidthProperty">
            <summary>
            The maximum measure width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MinMeasureHeightProperty">
            <summary>
            The minimum measure height property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MinMeasureWidthProperty">
            <summary>
            The minimum measure width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.SelectionAndAlternatingStyleHelperProperty">
            <summary>
            The selection and alternating style helper property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._amAnAlternate">
            <summary>
            The am an alternate
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._currentMeasuredContentSizeRequester">
            <summary>
            The current measured content size requester
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._fixedHeight">
            <summary>
            The fixed height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._fixedWidth">
            <summary>
            The fixed width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._isSelected">
            <summary>
            The is selected
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._maxMeasureHeight">
            <summary>
            The maximum measure height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._maxMeasureWidth">
            <summary>
            The maximum measure width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._measuredContentSize">
            <summary>
            The measured content size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._minMeasureHeight">
            <summary>
            The minimum measure height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._minMeasureWidth">
            <summary>
            The minimum measure width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView._stylingHelper">
            <summary>
            The styling helper
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView" /> class.
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.IsAlternateChanged">
            <summary>
            Occurs when [is alternate changed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.IsSelectedChanged">
            <summary>
            Occurs when [is selected changed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MeasuredContentSizeChanged">
            <summary>
            Occurs when [measured content size changed].
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.AutoCalcHeight">
            <summary>
            Gets or sets a value indicating whether [automatic calculate height].
            </summary>
            <value><c>true</c> if [automatic calculate height]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.AutoCalcWidth">
            <summary>
            Gets or sets a value indicating whether [automatic calculate width].
            </summary>
            <value><c>true</c> if [automatic calculate width]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.CurrentMeasuredContentSizeRequester">
            <summary>
            Gets or sets the current measured content size requester.
            </summary>
            <value>The current measured content size requester.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.FixedHeight">
            <summary>
            Gets or sets the height of the fixed.
            </summary>
            <value>The height of the fixed.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.FixedWidth">
            <summary>
            Gets or sets the width of the fixed.
            </summary>
            <value>The width of the fixed.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.IsAnAlternate">
            <summary>
            Gets or sets a value indicating whether this instance is an alternate.
            </summary>
            <value><c>true</c> if this instance is an alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.IsTryingToBeSelected">
            <summary>
            Gets or sets a value indicating whether this instance is trying to be selected.
            </summary>
            <value><c>true</c> if this instance is trying to be selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MaxMeasureHeight">
            <summary>
            Gets or sets the maximum height of the measure.
            </summary>
            <value>The maximum height of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MaxMeasureWidth">
            <summary>
            Gets or sets the maximum width of the measure.
            </summary>
            <value>The maximum width of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MeasuredContentSize">
            <summary>
            Gets or sets the size of the measured content.
            </summary>
            <value>The size of the measured content.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MinMeasureHeight">
            <summary>
            Gets or sets the minimum height of the measure.
            </summary>
            <value>The minimum height of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.MinMeasureWidth">
            <summary>
            Gets or sets the minimum width of the measure.
            </summary>
            <value>The minimum width of the measure.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.StylingHelper">
            <summary>
            Gets or sets the styling helper.
            </summary>
            <value>The styling helper.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.AfterSelectionChange(Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected)">
            <summary>
            Afters the selection change.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.AfterStyleApplied">
            <summary>
            Afters the style applied.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.CanSelectionBeMade(System.Boolean)">
            <summary>
            Determines whether this instance [can selection be made] the specified is selected.
            </summary>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <returns><c>true</c> if this instance [can selection be made] the specified is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.RemeasureSize">
            <summary>
            Remeasures the size.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.CreateMeasurableShapeViewProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView,``0,``0})">
            <summary>
            Creates the measurable shape view property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.CreateMeasurableShapeViewStyle(System.Nullable{Xamarin.Forms.Color},System.Double,System.Nullable{Xamarin.Forms.Color},System.Double)">
            <summary>
            Creates the measurable shape view style.
            </summary>
            <param name="backColor">Color of the back.</param>
            <param name="BorderThickness">The border thickness.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="cornerRadius">The corner radius.</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.OnMeasuredContentSizeChanged(Xamarin.Forms.Size)">
            <summary>
            Called when [measured content size changed].
            </summary>
            <param name="measuredContentSize">Size of the measured content.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.MeasurableStylableShapeView.HandleRequestCurrentMeasuredContentSize">
            <summary>
            Handles the size of the request current measured content.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.INumericSlider">
            <summary>
            Interface INumericSlider
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.INumericSlider.CurrentValue">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.INumericSlider.Thumb">
            <summary>
            Gets the thumb.
            </summary>
            <value>The thumb.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider">
            <summary>
            Class NumericSlider.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.INumericSlider" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.INumericSlider" />
            <remarks>This class is not described as validatable because it performs its own self-validation.
            It is also never out-of-range.</remarks>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.MARGIN_SIDE">
            <summary>
            The margin side
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.MINIMUM_POSSIBLE_WIDTH">
            <summary>
            The minimum possible width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.REMARKS_HEIGHT">
            <summary>
            The remarks height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.SLIDER_HEIGHT">
            <summary>
            The slider height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.THUMB_HEIGHT">
            <summary>
            The thumb height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.THUMB_WIDTH">
            <summary>
            The thumb width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.CurrentValueProperty">
            <summary>
            The current value property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._endColor">
            <summary>
            The end color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._endingRemarks">
            <summary>
            The ending remarks
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._fontFamily">
            <summary>
            The font family
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._maxValue">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._minValue">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._numberFormat">
            <summary>
            The number format
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._remarksFontAttributes">
            <summary>
            The remarks font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._remarksFontSize">
            <summary>
            The remarks font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._remarksTextColor">
            <summary>
            The remarks text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._startColor">
            <summary>
            The start color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._startingRemarks">
            <summary>
            The starting remarks
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._step">
            <summary>
            The step
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._thumbColor">
            <summary>
            The thumb color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._thumbFontAttributes">
            <summary>
            The thumb font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._thumbFontSize">
            <summary>
            The thumb font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._thumbTextColor">
            <summary>
            The thumb text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._goToNextStepEntered">
            <summary>
            The go to next step entered
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._handleThumbMovementEntered">
            <summary>
            The handle thumb movement entered
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._lastThumbPosition">
            <summary>
            The last thumb position
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._lastVal">
            <summary>
            The last value
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._lastWidthChange">
            <summary>
            The last width change
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._slider">
            <summary>
            The slider
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._sliderGrid">
            <summary>
            The slider grid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._thumbCanvas">
            <summary>
            The thumb canvas
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._thumbX">
            <summary>
            The thumb x
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider._verifyLegalCurrentValueEntered">
            <summary>
            The verify legal current value entered
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.#ctor(Xamarin.Forms.Color,System.String,System.String,System.Double,System.Double,System.String,Xamarin.Forms.FontAttributes,System.Double,Xamarin.Forms.Color,Xamarin.Forms.Color,System.String,System.Double,Xamarin.Forms.Color,Xamarin.Forms.FontAttributes,System.Double,Xamarin.Forms.Color,System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider" /> class.
            </summary>
            <param name="endColor">The end color.</param>
            <param name="endingRemarks">The ending remarks.</param>
            <param name="fontFamily">The font family.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="numberFormat">The number format.</param>
            <param name="remarksFontAttributes">The remarks font attributes.</param>
            <param name="remarksFontSize">Size of the remarks font.</param>
            <param name="remarksTextColor">Color of the remarks text.</param>
            <param name="startColor">The start color.</param>
            <param name="startingRemarks">The starting remarks.</param>
            <param name="step">The step.</param>
            <param name="thumbColor">Color of the thumb.</param>
            <param name="thumbFontAttributes">The thumb font attributes.</param>
            <param name="thumbFontSize">Size of the thumb font.</param>
            <param name="thumbTextColor">Color of the thumb text.</param>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.EditableNumericSlider">
            <summary>
            Gets the editable numeric slider.
            </summary>
            <value>The editable numeric slider.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.A_StepRange">
            <summary>
            Gets a step range.
            </summary>
            <value>a step range.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.B_NetRangeWithoutThumb">
            <summary>
            Gets the b net range without thumb.
            </summary>
            <value>The b net range without thumb.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.C_EachStepAsPixels">
            <summary>
            Gets the c each step as pixels.
            </summary>
            <value>The c each step as pixels.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.CurrentValue">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.Thumb">
            <summary>
            Gets the thumb.
            </summary>
            <value>The thumb.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.ValidatableNumericSliderBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.NumericSlider,``0,``0})">
            <summary>
            Validatables the numeric slider bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.GoToNextStep(System.Double)">
            <summary>
            Goes to next step.
            </summary>
            <param name="proposedTranslationX">The proposed translation x.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.HandleThumbMovement(System.Object,Xamarin.Forms.PanUpdatedEventArgs)">
            <summary>
            Handles the thumb movement.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.PanUpdatedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.SetThumbPositionBasedOnCurrentValue">
            <summary>
            Sets the thumb position based on current value.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.NumericSlider.VerifyAndSetCurrentValue(System.Double)">
            <summary>
            Verifies the and set current value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ResizableGrid">
            <summary>
            Class ResizableGrid.
            Implements the <see cref="T:Xamarin.Forms.Grid" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Grid" />
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ResizableGrid.WidthChanged">
            <summary>
            Occurs when [width changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ResizableGrid.OnSizeAllocated(System.Double,System.Double)">
            <summary>
            Called when [size allocated].
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ISelectionImageLabelButton">
            <summary>
            Interface ISelectionImageLabelButton
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISelectionImageLabelButton.GetImageFromResource">
            <summary>
            Gets or sets a value indicating whether [get image from resource].
            </summary>
            <value><c>true</c> if [get image from resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISelectionImageLabelButton.ImageResourceClassType">
            <summary>
            Gets or sets the type of the image resource class.
            </summary>
            <value>The type of the image resource class.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISelectionImageLabelButton.MultiSelectAllowed">
            <summary>
            Gets or sets a value indicating whether [multi select allowed].
            </summary>
            <value><c>true</c> if [multi select allowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase">
            <summary>
            A button that can select an item among a master collection of items.
            Multi-select is supported.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ISelectionImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ISelectionImageLabelButton" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.GetImageFromResourceProperty">
            <summary>
            The get image from resource property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.ImageResourceClassTypeProperty">
            <summary>
            The image resource class type property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.MultiSelectAllowedProperty">
            <summary>
            The multi select allowed property
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.GetImageFromResource">
            <summary>
            Gets or sets a value indicating whether [get image from resource].
            </summary>
            <value><c>true</c> if [get image from resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.ImageResourceClassType">
            <summary>
            Gets or sets the type of the image resource class.
            </summary>
            <value>The type of the image resource class.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.MultiSelectAllowed">
            <summary>
            Gets or sets a value indicating whether [multi select allowed].
            </summary>
            <value><c>true</c> if [multi select allowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.UpdateButtonTextFromStyle">
            <summary>
            Required by this case; each style has its own text.
            </summary>
            <value><c>true</c> if [update button text from style]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.CreateSelectionImageLabelButtonBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase,``0,``0})">
            <summary>
            Creates the selection image label button bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.Deselect">
            <summary>
            Deselects this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionImageLabelButtonBase.OnButtonCommandCreated">
            <summary>
            Called when [button command created].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate">
            <summary>
            Interface ICanAlternate
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate.IsAnAlternate">
            <summary>
            Gets or sets a value indicating whether this instance is an alternate.
            </summary>
            <value><c>true</c> if this instance is an alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate.IsAlternateChanged">
            <summary>
            Occurs when [is alternate changed].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected">
            <summary>
            Interface ICanBeSelected
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected.IsTryingToBeSelected">
            <summary>
            True if the user attempts t select but wee are prevented from selection by various rules.
            </summary>
            <value><c>true</c> if this instance is trying to be selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected.IsSelectedChanged">
            <summary>
            Occurs when [is selected changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected.AfterSelectionChange(Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected)">
            <summary>
            Afters the selection change.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected.CanSelectionBeMade(System.Boolean)">
            <summary>
            Determines whether this instance [can selection be made] the specified is selected.
            </summary>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <returns><c>true</c> if this instance [can selection be made] the specified is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ICanOverrideSelectionAndAlternation">
            <summary>
            Interface ICanOverrideSelectionAndAlternation
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ICanAlternate" />
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.ICanOverrideSelectionAndAlternation.ConsiderSelectionOrAlterationOverride">
            <summary>
            Occurs when [consider selection or alteration override].
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionAndAlternationProvider">
            <summary>
            Interface IHaveSelectionAndAlternationProvider
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionAndAlternationProvider.SelectionAndAlternationProvider">
            <summary>
            Gets the selection and alternation provider.
            </summary>
            <value>The selection and alternation provider.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionProvider">
            <summary>
            Interface IHaveSelectionProvider
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionProvider.SelectionProvider">
            <summary>
            Gets the selection provider.
            </summary>
            <value>The selection provider.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper">
            <summary>
            Interface IHaveSelectionStylingHelper
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper.StylingHelper">
            <summary>
            Gets or sets the styling helper.
            </summary>
            <value>The styling helper.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper.AfterStyleApplied">
            <summary>
            Afters the style applied.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper">
            <summary>
            Interface ISelectionStylingHelper
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper.AlternateDeselectedStyle">
            <summary>
            Gets or sets the alternate deselected style.
            </summary>
            <value>The alternate deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper.DeselectedStyle">
            <summary>
            Gets or sets the deselected style.
            </summary>
            <value>The deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper.SelectedStyle">
            <summary>
            Gets or sets the selected style.
            </summary>
            <value>The selected style.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper.CanAttach(Xamarin.Forms.View)">
            <summary>
            Determines whether this instance can attach the specified host view.
            </summary>
            <param name="hostView">The host view.</param>
            <returns><c>true</c> if this instance can attach the specified host view; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper">
            <summary>
            Class SelectionStylingHelper.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ISelectionStylingHelper" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.AlternateDeselectedStyleProperty">
            <summary>
            The alternate deselected style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.DeselectedStyleProperty">
            <summary>
            The deselected style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.SelectedStyleProperty">
            <summary>
            The selected style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._alternateDeselectedStyle">
            <summary>
            The alternate deselected style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._alternateProvider">
            <summary>
            The alternate provider
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._deselectedStyle">
            <summary>
            The deselected style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._hostView">
            <summary>
            The host view
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._overrideProvider">
            <summary>
            The override provider
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._selectedStyle">
            <summary>
            The selected style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._selectionProvider">
            <summary>
            The selection provider
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper._stylingHost">
            <summary>
            The styling host
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.AlternateDeselectedStyle">
            <summary>
            Gets or sets the alternate deselected style.
            </summary>
            <value>The alternate deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.DeselectedStyle">
            <summary>
            Gets or sets the deselected style.
            </summary>
            <value>The deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.SelectedStyle">
            <summary>
            Gets or sets the selected style.
            </summary>
            <value>The selected style.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.CanAttach(Xamarin.Forms.View)">
            <summary>
            Determines whether this instance can attach the specified host view.
            </summary>
            <param name="hostView">The host view.</param>
            <returns><c>true</c> if this instance can attach the specified host view; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.CreateSelectionStylingHelperProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper,``0,``0})">
            <summary>
            Creates the selection styling helper property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SelectionStylingHelper.AssignCurrentStyle">
            <summary>
            Assigns the current style.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView">
            <summary>
            Class ShapeView.
            Implements the <see cref="T:Xamarin.Forms.PancakeView.PancakeView" />
            </summary>
            <seealso cref="T:Xamarin.Forms.PancakeView.PancakeView" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ShapeView.ColorProperty">
            <summary>
            The color property
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ShapeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ShapeView.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ShapeView.CreateValidatableViewBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.ShapeView,``0,``0})">
            <summary>
            Creates the validatable view bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton">
            <summary>
            Interface ISimpleImageLabelButton
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.ButtonBackColor">
            <summary>
            Gets or sets the color of the button back.
            </summary>
            <value>The color of the button back.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.ButtonBorderColor">
            <summary>
            Gets or sets the color of the button border.
            </summary>
            <value>The color of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.ButtonBorderWidth">
            <summary>
            Gets or sets the width of the button border.
            </summary>
            <value>The width of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.ImageFilePath">
            <summary>
            Gets or sets the image file path.
            </summary>
            <value>The image file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.LabelFontAttributes">
            <summary>
            Gets or sets the label font attributes.
            </summary>
            <value>The label font attributes.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.LabelFontSize">
            <summary>
            Gets or sets the size of the label font.
            </summary>
            <value>The size of the label font.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>The label text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton.LabelTextColor">
            <summary>
            Gets or sets the color of the label text.
            </summary>
            <value>The color of the label text.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton">
            <summary>
            A button that can contain either an image and/or a label.
            This button is not selectable or toggle-able.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ISimpleImageLabelButton" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ButtonBackColorProperty">
            <summary>
            The button back color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ButtonBorderColorProperty">
            <summary>
            The button border color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ButtonBorderWidthProperty">
            <summary>
            The button border width property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ImageFilePathProperty">
            <summary>
            The image file path property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelFontAttributesProperty">
            <summary>
            The label font attributes property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelFontSizeProperty">
            <summary>
            The label font size property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelTextColorProperty">
            <summary>
            The label text color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelTextProperty">
            <summary>
            The label text property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._buttonBackColor">
            <summary>
            The button back color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._buttonBorderColor">
            <summary>
            The button border color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._buttonBorderWidth">
            <summary>
            The button border width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._labelFontAttributes">
            <summary>
            The label font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._labelFontSize">
            <summary>
            The label font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._labelText">
            <summary>
            The label text
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton._labelTextColor">
            <summary>
            The label text color
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton" /> class.
            </summary>
            <param name="labelWidth">Width of the label.</param>
            <param name="labelHeight">Height of the label.</param>
            <param name="fontFamilyOverride">The font family override.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ButtonBackColor">
            <summary>
            Gets or sets the color of the button back.
            </summary>
            <value>The color of the button back.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ButtonBorderColor">
            <summary>
            Gets or sets the color of the button border.
            </summary>
            <value>The color of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ButtonBorderWidth">
            <summary>
            Gets or sets the width of the button border.
            </summary>
            <value>The width of the button border.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ImageFilePath">
            <summary>
            Gets or sets the image file path.
            </summary>
            <value>The image file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelFontAttributes">
            <summary>
            Gets or sets the label font attributes.
            </summary>
            <value>The label font attributes.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelFontSize">
            <summary>
            Gets or sets the size of the label font.
            </summary>
            <value>The size of the label font.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>The label text.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.LabelTextColor">
            <summary>
            Gets or sets the color of the label text.
            </summary>
            <value>The color of the label text.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.CreateSimpleImageLabelButton(System.String,Xamarin.Forms.Color,System.Double,System.Double,System.Double,System.Object,Xamarin.Forms.Color,Xamarin.Forms.Color,Xamarin.Forms.LayoutOptions,Xamarin.Forms.LayoutOptions,System.String,System.String,System.Single,Xamarin.Forms.FontAttributes,System.Nullable{System.Double},System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates the simple image label button.
            </summary>
            <param name="labelText">The label text.</param>
            <param name="labelTextColor">Color of the label text.</param>
            <param name="labelFontSize">Size of the label font.</param>
            <param name="widthRequest">The width request.</param>
            <param name="heightRequest">The height request.</param>
            <param name="bindingContext">The binding context.</param>
            <param name="buttonBackColor">Color of the button back.</param>
            <param name="buttonBorderColor">Color of the button border.</param>
            <param name="horizontalOptions">The horizontal options.</param>
            <param name="verticalOptions">The vertical options.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="imageFilePath">The image file path.</param>
            <param name="buttonBorderWidth">Width of the button border.</param>
            <param name="labelFontAttributes">The label font attributes.</param>
            <param name="cornerRadiusFactor">The corner radius factor.</param>
            <param name="buttonCommandBindingName">Name of the button command binding.</param>
            <param name="animateButton">if set to <c>true</c> [animate button].</param>
            <param name="includeHapticFeedback">if set to <c>true</c> [include haptic feedback].</param>
            <returns>ISimpleImageLabelButton.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.CreateSimpleImageLabelButtonBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton,``0,``0})">
            <summary>
            Creates the simple image label button bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.Deselect">
            <summary>
            Deselects this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ResetButtonStyle">
            <summary>
            Resets the button style.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.SimpleImageLabelButton.ResetLabelStyle">
            <summary>
            Resets the label style.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IStylableLabel">
            <summary>
            Interface IStylableLabel
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionProvider" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionAndAlternationProvider" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionStylingHelper" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionProvider" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IHaveSelectionAndAlternationProvider" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel">
            <summary>
            Class StylableLabel.
            Implements the <see cref="T:Xamarin.Forms.Label" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IStylableLabel" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Label" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IStylableLabel" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.SelectionAndAlternatingStyleHelperProperty">
            <summary>
            The selection and alternating style helper property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel._amAnAlternateOverridden">
            <summary>
            The am an alternate overridden
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel._isSelectedOverridden">
            <summary>
            The is selected overridden
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel._selectionStyleHelper">
            <summary>
            The selection style helper
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.#ctor(Com.MarcusTS.SharedForms.Views.Controls.ICanBeSelected)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel" /> class.
            </summary>
            <param name="selectionProvider">The selection provider.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.DefaultAlternateDeselectedStylableLabelStyle">
            <summary>
            Gets the default alternate deselected stylable label style.
            </summary>
            <value>The default alternate deselected stylable label style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.DefaultDeselectedStylableLabelStyle">
            <summary>
            Gets the default deselected stylable label style.
            </summary>
            <value>The default deselected stylable label style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.DefaultSelectedStylableLabelStyle">
            <summary>
            Gets the default selected stylable label style.
            </summary>
            <value>The default selected stylable label style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.IAmAnAlternateOverridden">
            <summary>
            Gets or sets a value indicating whether [i am an alternate overridden].
            </summary>
            <value><c>true</c> if [i am an alternate overridden]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.IsSelectedOverridden">
            <summary>
            Gets or sets a value indicating whether this instance is selected overridden.
            </summary>
            <value><c>true</c> if this instance is selected overridden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.SelectionAndAlternationProvider">
            <summary>
            Gets or sets the selection and alternation provider.
            </summary>
            <value>The selection and alternation provider.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.SelectionProvider">
            <summary>
            Gets or sets the selection provider.
            </summary>
            <value>The selection provider.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.StylingHelper">
            <summary>
            Gets or sets the styling helper.
            </summary>
            <value>The styling helper.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.AfterStyleApplied">
            <summary>
            Afters the style applied.
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.IAmAnAlternateOverriddenChanged">
            <summary>
            Occurs when [i am an alternate overridden changed].
            </summary>
        </member>
        <member name="E:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.IsSelectedOverriddenChanged">
            <summary>
            Occurs when [is selected overridden changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.CreateStylableLabelProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.StylableLabel,``0,``0})">
            <summary>
            Creates the stylable label property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.StylableLabel.CreateStylableLabelStyle(System.Nullable{Xamarin.Forms.Color},System.Nullable{Xamarin.Forms.Color},Xamarin.Forms.TextAlignment,System.Nullable{Xamarin.Forms.NamedSize},System.Double,Xamarin.Forms.FontAttributes,System.Double,System.Double,Xamarin.Forms.LineBreakMode)">
            <summary>
            Creates the stylable label style.
            </summary>
            <param name="textColor">Color of the text.</param>
            <param name="backColor">Color of the back.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="fontNamedSize">Size of the font named.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontAttributes">The font attributes.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="breakMode">The break mode.</param>
            <returns>Style.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency">
            <summary>
            Enum TaskRepeatFrequency
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency.Never">
            <summary>
            The never
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency.Hourly">
            <summary>
            The hourly
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency.Daily">
            <summary>
            The daily
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency.Weekly">
            <summary>
            The weekly
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency.Monthly">
            <summary>
            The monthly
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ITaskRepeatToggleImageLabelButton">
            <summary>
            Interface ITaskRepeatToggleImageLabelButton
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton&lt;Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton&lt;Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatToggleImageLabelButton">
            <summary>
            Class TaskRepeatToggleImageLabelButton.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase&lt;Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase&lt;Com.MarcusTS.SharedForms.Views.Controls.TaskRepeatFrequency&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor">
            <summary>
            Interface IThreadSafeAccessor
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor.ReadStoredValue">
            <summary>
            Reads the stored value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor.WriteStoredValue(System.Object)">
            <summary>
            Writes the stored value.
            </summary>
            <param name="valueToStore">The value to store.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ThreadSafeAccessor">
            <summary>
            Class ThreadSafeAccessor.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IThreadSafeAccessor" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ThreadSafeAccessor._storedValue">
            <summary>
            The stored value
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ThreadSafeAccessor.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ThreadSafeAccessor" /> class.
            </summary>
            <param name="storedValue">The stored value.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ThreadSafeAccessor.ReadStoredValue">
            <summary>
            Reads the stored value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ThreadSafeAccessor.WriteStoredValue(System.Object)">
            <summary>
            Writes the stored value.
            </summary>
            <param name="valueToStore">The value to store.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton">
            <summary>
            Interface ITriStateImageLabelButton Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IImageLabelButton" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.AllowCoercedDeselection">
            <summary>
            Gets or sets a value indicating whether [allow coerced deselection].
            </summary>
            <value><c>true</c> if [allow coerced deselection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ButtonDeselectedStyle">
            <summary>
            Gets or sets the button deselected style.
            </summary>
            <value>The button deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ButtonDisabledStyle">
            <summary>
            Gets or sets the button disabled style.
            </summary>
            <value>The button disabled style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ButtonSelectedStyle">
            <summary>
            Gets or sets the button selected style.
            </summary>
            <value>The button selected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ButtonToggleSelection">
            <summary>
            Gets or sets a value indicating whether [button toggle selection].
            </summary>
            <value><c>true</c> if [button toggle selection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.CanDisable">
            <summary>
            Gets or sets a value indicating whether this instance can disable.
            </summary>
            <value><c>true</c> if this instance can disable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.CanSelect">
            <summary>
            Gets or sets a value indicating whether this instance can select.
            </summary>
            <value><c>true</c> if this instance can select; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.GetImageFromResource">
            <summary>
            Gets or sets a value indicating whether [get image from resource].
            </summary>
            <value><c>true</c> if [get image from resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ImageDeselectedFilePath">
            <summary>
            Gets or sets the image deselected file path.
            </summary>
            <value>The image deselected file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ImageDisabledFilePath">
            <summary>
            Gets or sets the image disabled file path.
            </summary>
            <value>The image disabled file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ImageResourceClassType">
            <summary>
            Gets or sets the type of the image resource class.
            </summary>
            <value>The type of the image resource class.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ImageSelectedFilePath">
            <summary>
            Gets or sets the image selected file path.
            </summary>
            <value>The image selected file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.IsCompleted">
            <summary>
            Gets or sets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.LabelDeselectedStyle">
            <summary>
            Gets or sets the label deselected style.
            </summary>
            <value>The label deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.LabelDisabledStyle">
            <summary>
            Gets or sets the label disabled style.
            </summary>
            <value>The label disabled style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.LabelSelectedStyle">
            <summary>
            Gets or sets the label selected style.
            </summary>
            <value>The label selected style.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton.ForceOnIsEnabledChanged">
            <summary>
            Forces the on is enabled changed.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton">
            <summary>
            A button that can contain either an image and/or a label. Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase" />
            Implements the
            <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ITriStateImageLabelButton" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.DESELECTED_BUTTON_STATE">
            <summary>
            The deselected button state
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.DISABLED_BUTTON_STATE">
            <summary>
            The disabled button state
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.SELECTED_BUTTON_STATE">
            <summary>
            The selected button state
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ButtonDeselectedStyleProperty">
            <summary>
            The button deselected style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.CanSelectProperty">
            <summary>
            The can select property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.DisabledButtonStyleProperty">
            <summary>
            The disabled button style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.GetImageFromResourceProperty">
            <summary>
            The get image from resource property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageDeselectedFilePathProperty">
            <summary>
            The image deselected file path property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageDisabledFilePathProperty">
            <summary>
            The image disabled file path property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageResourceClassTypeProperty">
            <summary>
            The image resource class type property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageSelectedFilePathProperty">
            <summary>
            The image selected file path property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.IsCompletedProperty">
            <summary>
            The is completed property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LabelDeselectedStyleProperty">
            <summary>
            The label deselected style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LabelDisabledStyleProperty">
            <summary>
            The label disabled style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LabelSelectedStyleProperty">
            <summary>
            The label selected style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.SelectedButtonStyleProperty">
            <summary>
            The selected button style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ToggleSelectionProperty">
            <summary>
            Converts to ggleselectionproperty.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._buttonDeselectedStyle">
            <summary>
            The button deselected style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._buttonDisabledStyle">
            <summary>
            The button disabled style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._buttonSelectedStyle">
            <summary>
            The button selected style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._buttonToggleSelection">
            <summary>
            The button toggle selection
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._canDisable">
            <summary>
            The can disable
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._canSelect">
            <summary>
            The can select
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._getImageFromResource">
            <summary>
            The get image from resource
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._imageDeselectedFilePath">
            <summary>
            The image deselected file path
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._imageDisabledFilePath">
            <summary>
            The image disabled file path
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._imageLabelButtonStyles">
            <summary>
            The image label button styles
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._imageResourceClassType">
            <summary>
            The image resource class type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._imageSelectedFilePath">
            <summary>
            The image selected file path
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._isCompleted">
            <summary>
            The is completed
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._labelDeselectedStyle">
            <summary>
            The label deselected style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._labelDisabledStyle">
            <summary>
            The label disabled style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton._labelSelectedButtonStyle">
            <summary>
            The label selected button style
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.AllowCoercedDeselection">
            <summary>
            Gets or sets a value indicating whether [allow coerced deselection].
            </summary>
            <value><c>true</c> if [allow coerced deselection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ButtonDeselectedStyle">
            <summary>
            Gets or sets the button deselected style.
            </summary>
            <value>The button deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ButtonDisabledStyle">
            <summary>
            Gets or sets the button disabled style.
            </summary>
            <value>The button disabled style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ButtonSelectedStyle">
            <summary>
            Gets or sets the button selected style.
            </summary>
            <value>The button selected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ButtonToggleSelection">
            <summary>
            Gets or sets a value indicating whether [button toggle selection].
            </summary>
            <value><c>true</c> if [button toggle selection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.CanDisable">
            <summary>
            Gets or sets a value indicating whether this instance can disable.
            </summary>
            <value><c>true</c> if this instance can disable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.CanSelect">
            <summary>
            Gets or sets a value indicating whether this instance can select.
            </summary>
            <value><c>true</c> if this instance can select; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.GetImageFromResource">
            <summary>
            Gets or sets a value indicating whether [get image from resource].
            </summary>
            <value><c>true</c> if [get image from resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageDeselectedFilePath">
            <summary>
            Gets or sets the image deselected file path.
            </summary>
            <value>The image deselected file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageDisabledFilePath">
            <summary>
            Gets or sets the image disabled file path.
            </summary>
            <value>The image disabled file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageLabelButtonStyles">
            <summary>
            Gets the image label button styles.
            </summary>
            <value>The image label button styles.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageResourceClassType">
            <summary>
            Gets or sets the type of the image resource class.
            </summary>
            <value>The type of the image resource class.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ImageSelectedFilePath">
            <summary>
            Gets or sets the image selected file path.
            </summary>
            <value>The image selected file path.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.IsCompleted">
            <summary>
            Gets or sets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LabelDeselectedStyle">
            <summary>
            Gets or sets the label deselected style.
            </summary>
            <value>The label deselected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LabelDisabledStyle">
            <summary>
            Gets or sets the label disabled style.
            </summary>
            <value>The label disabled style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LabelSelectedStyle">
            <summary>
            Gets or sets the label selected style.
            </summary>
            <value>The label selected style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.UpdateButtonTextFromStyle">
            <summary>
            Leave the button intact; it is not intended to change with selections.
            </summary>
            <value><c>true</c> if [update button text from style]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ForceOnIsEnabledChanged">
            <summary>
            Forces the on is enabled changed.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.CreateImageLabelButtonBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton,``0,``0})">
            <summary>
            Creates the image label button bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.Deselect">
            <summary>
            Deselects this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.LastCheckBeforeAssigningStyle(Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle)">
            <summary>
            Lasts the check before assigning style.
            </summary>
            <param name="style">The style.</param>
            <returns>ImageLabelButtonStyle.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.OnButtonCommandCreated">
            <summary>
            Called when [button command created].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.OnIsEnabledChanged">
            <summary>
            Called when [is enabled changed].
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.AssignStylesIfNotNull(Com.MarcusTS.SharedForms.Views.Controls.ImageLabelButtonStyle,Xamarin.Forms.Style,System.String,Xamarin.Forms.Style)">
            <summary>
            Assigns the styles if not null.
            </summary>
            <param name="imageLabelButtonStyle">The image label button style.</param>
            <param name="buttonStyle">The button style.</param>
            <param name="imageFilePath">The image file path.</param>
            <param name="labelStyle">The label style.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.CreateOrRefreshImageLabelButtonStyles(System.Boolean)">
            <summary>
            Creates the or refresh image label button styles.
            </summary>
            <param name="forceCreate">if set to <c>true</c> [force create].</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.FixNullButtonState">
            <summary>
            Fixes the state of the null button.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.TriStateImageLabelButton.ResetSelectionStyle">
            <summary>
            Resets the selection style.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableCheckBox">
            <summary>
            Interface IValidatableCheckBox Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableCheckBox.EditableCheckBox">
            <summary>
            Gets the editable CheckBox.
            </summary>
            <value>The editable CheckBox.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox">
            <summary>
            A UI element that includes an CheckBox surrounded by a border. Implements the <see cref="T:Xamarin.Forms.Grid" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableCheckBox" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Xamarin.Forms.Grid" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableCheckBox" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox._editableCheckBox">
            <summary>
            The editable CheckBox
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.#ctor(System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.String,System.Nullable{System.Double},System.Action,System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox" /> class.
            </summary>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.EditableCheckBox">
            <summary>
            Gets the editable CheckBox.
            </summary>
            <value>The editable CheckBox.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableCheckBox.NullableLongFunc(System.String)">
            <summary>
            Nullables the long function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableDateTime">
            <summary>
            Interface IValidatableDateTime Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableDateTime.EditableDatePicker">
            <summary>
            Gets the editable date picker.
            </summary>
            <value>The editable date picker.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableDateTime.NullableResult">
            <summary>
            Gets or sets the nullable result.
            </summary>
            <value>The nullable result.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime">
            <summary>
            A UI element that includes an DateTime surrounded by a border. Implements the <see cref="T:Xamarin.Forms.Grid" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableDateTime" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Xamarin.Forms.Grid" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableDateTime" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.NullableResultProperty">
            <summary>
            The invalid border view style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime._fontSize">
            <summary>
            The font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime._editableDateTime">
            <summary>
            The editable date time
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.#ctor(System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.Boolean,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Double},Xamarin.Forms.Keyboard,System.Action,System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime" /> class.
            </summary>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="emptyAllowed">if set to <c>true</c> [empty allowed].</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="keyboard">The keyboard.</param>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="returnNonNullableResult">if set to <c>true</c> [return non nullable result].</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.EditableDatePicker">
            <summary>
            Gets the editable date picker.
            </summary>
            <value>The editable date picker.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.NullableResult">
            <summary>
            Gets or sets the nullable result.
            </summary>
            <value>The nullable result.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime.CreateValidatableViewBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.ValidatableDateTime,``0,``0})">
            <summary>
            Creates the validatable view bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEntry">
            <summary>
            Interface IValidatableEntry Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEntry.EditableEntry">
            <summary>
            Gets the editable entry.
            </summary>
            <value>The editable entry.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry">
            <summary>
            A UI element that includes an Entry surrounded by a border. Implements the <see cref="T:Xamarin.Forms.Grid" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEntry" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Xamarin.Forms.Grid" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEntry" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.HIDE_PASSWORD_IMAGE">
            <summary>
            The hide password image
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.SHOW_PASSWORD_IMAGE">
            <summary>
            The show password image
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._canUnmaskPassword">
            <summary>
            The can unmask password
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._isPassword">
            <summary>
            The is password
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._keyboard">
            <summary>
            The keyboard
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._editableEntry">
            <summary>
            The editable entry
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._editableViewContainer">
            <summary>
            The editable view container
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._isPasswordShowing">
            <summary>
            The is password showing
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry._showHideImage">
            <summary>
            The show hide image
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.#ctor(System.Nullable{System.Double},System.Boolean,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.Boolean,Xamarin.Forms.Keyboard,System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry" /> class.
            </summary>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="canUnmaskPassword">if set to <c>true</c> [can unmask password].</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="entryFontSize">Size of the entry font.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="isPassword">if set to <c>true</c> [is password].</param>
            <param name="keyboard">The keyboard.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.IsPasswordShowing">
            <summary>
            Gets or sets a value indicating whether this instance is password showing.
            </summary>
            <value><c>true</c> if this instance is password showing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.EditableEntry">
            <summary>
            Gets the editable entry.
            </summary>
            <value>The editable entry.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry.SetShowHideImageSource">
            <summary>
            Sets the show hide image source.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEnumPicker">
            <summary>
            Interface IValidatableEnumPicker Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEnumPicker.EditableEnumPicker">
            <summary>
            Gets the editable enum picker.
            </summary>
            <value>The editable enum picker.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker">
            <summary>
            A UI element that includes an EnumPicker surrounded by a border. Implements the <see cref="T:Xamarin.Forms.Grid" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEnumPicker" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Xamarin.Forms.Grid" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEnumPicker" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker._enumType">
            <summary>
            The enum type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker._fontSize">
            <summary>
            The font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker._viewModelPropertyName">
            <summary>
            The view model property name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker._editableEnumPicker">
            <summary>
            The editable enum picker
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker.#ctor(System.Type,System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.Boolean,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Action,System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker" /> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="emptyAllowed">if set to <c>true</c> [empty allowed].</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEnumPicker.EditableEnumPicker">
            <summary>
            Gets the editable enum picker.
            </summary>
            <value>The editable enum picker.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableNumericEntry">
            <summary>
            Interface IValidatableNumericEntry
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEntry" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableEntry" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry">
            <summary>
            Class ValidatableNumericEntry.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableNumericEntry" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableEntry" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableNumericEntry" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry._validator">
            <summary>
            The validator
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.#ctor(System.Nullable{System.Double},Xamarin.Forms.BindingMode,System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},Xamarin.Forms.Keyboard,System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Behaviors.INumericEntryValidationBehavior,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry" /> class.
            </summary>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="entryFontSize">Size of the entry font.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="keyboard">The keyboard.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.NumericConverterFromNumericType(Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid)">
            <summary>
            Numerics the type of the converter from numeric.
            </summary>
            <param name="validator">The validator.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.DoubleFunc(System.String)">
            <summary>
            Doubles the function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.IntFunc(System.String)">
            <summary>
            Ints the function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.LongFunc(System.String)">
            <summary>
            Longs the function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.NullableDoubleFunc(System.String)">
            <summary>
            Nullables the double function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.NullableIntFunc(System.String)">
            <summary>
            Nullables the int function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableNumericEntry.NullableLongFunc(System.String)">
            <summary>
            Nullables the long function.
            </summary>
            <param name="valueEntered">The value entered.</param>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatablePicker">
            <summary>
            Interface IValidatablePicker Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatablePicker.EditablePicker">
            <summary>
            Gets the editable picker.
            </summary>
            <value>The editable picker.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker">
            <summary>
            A UI element that includes an Picker surrounded by a border. Implements the <see cref="T:Xamarin.Forms.Grid" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatablePicker" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Xamarin.Forms.Grid" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatablePicker" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker._fontSize">
            <summary>
            The font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker._items">
            <summary>
            The items
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker._editablePicker">
            <summary>
            The editable picker
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker._viewModelPropertyName">
            <summary>
            The view model property name
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker.#ctor(System.Collections.IList,System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.Boolean,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Action,System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker" /> class.
            </summary>
            <param name="items">The items.</param>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="emptyAllowed">if set to <c>true</c> [empty allowed].</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="onIsValidChangedAction">The on is valid changed action.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="returnAsNumeric">if set to <c>true</c> [return as numeric].</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="isNumeric">if set to <c>true</c> [is numeric].</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatablePicker.EditablePicker">
            <summary>
            Gets the editable picker.
            </summary>
            <value>The editable picker.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableSlider">
            <summary>
            Interface IValidatableSlider
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableSlider.EditableSlider">
            <summary>
            Gets the editable slider.
            </summary>
            <value>The editable slider.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableSlider.SliderGrid">
            <summary>
            Gets the slider grid.
            </summary>
            <value>The slider grid.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider">
            <summary>
            Class ValidatableSlider.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableSlider" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableSlider" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.MARGIN_SIDE">
            <summary>
            The margin side
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.REMARKS_HEIGHT">
            <summary>
            The remarks height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.SLIDER_HEIGHT">
            <summary>
            The slider height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._endingRemarks">
            <summary>
            The ending remarks
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._fontFamily">
            <summary>
            The font family
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._maxColor">
            <summary>
            The maximum color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._maxValue">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._minColor">
            <summary>
            The minimum color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._minValue">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._remarksFontAttributes">
            <summary>
            The remarks font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._remarksFontSize">
            <summary>
            The remarks font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._remarksTextColor">
            <summary>
            The remarks text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._startingRemarks">
            <summary>
            The starting remarks
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._step">
            <summary>
            The step
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._thumbColor">
            <summary>
            The thumb color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._editableSlider">
            <summary>
            The editable slider
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._sliderColor">
            <summary>
            The slider color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider._sliderGrid">
            <summary>
            The slider grid
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.#ctor(System.String,System.String,System.Nullable{Xamarin.Forms.Color},System.Double,System.Nullable{Xamarin.Forms.Color},System.Double,Xamarin.Forms.FontAttributes,System.Nullable{System.Double},System.Nullable{Xamarin.Forms.Color},System.Nullable{Xamarin.Forms.Color},System.String,System.Double,System.Nullable{Xamarin.Forms.Color},System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider" /> class.
            </summary>
            <param name="endingRemarks">The ending remarks.</param>
            <param name="fontFamily">The font family.</param>
            <param name="maxColor">The maximum color.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minColor">The minimum color.</param>
            <param name="minValue">The minimum value.</param>
            <param name="remarksFontAttributes">The remarks font attributes.</param>
            <param name="remarksFontSize">Size of the remarks font.</param>
            <param name="remarksTextColor">Color of the remarks text.</param>
            <param name="sliderColor">Color of the slider.</param>
            <param name="startingRemarks">The starting remarks.</param>
            <param name="step">The step.</param>
            <param name="thumbColor">Color of the thumb.</param>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.EditableSlider">
            <summary>
            Gets the editable slider.
            </summary>
            <value>The editable slider.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableSlider.SliderGrid">
            <summary>
            Gets the slider grid.
            </summary>
            <value>The slider grid.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView">
            <summary>
            Interface IValidatableView Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" />
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.BorderView">
            <summary>
            Gets the border view.
            </summary>
            <value>The border view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.CurrentInstructions">
            <summary>
            Gets or sets the current instructions.
            </summary>
            <value>The current instructions.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.InstructionsLabel">
            <summary>
            Gets the instructions label.
            </summary>
            <value>The instructions label.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.InvalidBorderViewStyle">
            <summary>
            Gets or sets the invalid border view style.
            </summary>
            <value>The invalid border view style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.InvalidInstructionsStyle">
            <summary>
            Gets or sets the invalid instructions style.
            </summary>
            <value>The invalid instructions style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.InvalidPlaceholderStyle">
            <summary>
            Gets or sets the invalid placeholder style.
            </summary>
            <value>The invalid placeholder style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.PlaceholderLabel">
            <summary>
            Gets the placeholder label.
            </summary>
            <value>The placeholder label.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.ValidBorderViewStyle">
            <summary>
            Gets or sets the valid border view style.
            </summary>
            <value>The valid border view style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.ValidInstructionsStyle">
            <summary>
            Gets or sets the valid instructions style.
            </summary>
            <value>The valid instructions style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.ValidPlaceholderStyle">
            <summary>
            Gets or sets the valid placeholder style.
            </summary>
            <value>The valid placeholder style.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.CallRevalidate">
            <summary>
            Calls the revalidate.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView.SetTabIndexes(System.Int32)">
            <summary>
            Sets the tab indexes.
            </summary>
            <param name="incomingTabIndex">Index of the incoming tab.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase">
            <summary>
            A UI element that includes an Entry surrounded by a border. Implements the <see cref="T:Xamarin.Forms.Grid" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
            </summary>
            <seealso cref="T:Xamarin.Forms.Grid" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IValidatableView" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.BORDER_VIEW_HEIGHT">
            <summary>
            The default border view height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.INSTRUCTIONS_HEIGHT">
            <summary>
            The default instructions height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.PLACEHOLDER_HEIGHT">
            <summary>
            The default placeholder height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.BORDER_VIEW_BORDER_WIDTH">
            <summary>
            The default border view border width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.GRID_SINGLE_PADDING">
            <summary>
            The default grid single padding
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.PLACEHOLDER_INSET">
            <summary>
            The placeholder inset
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.PLACEHOLDER_LABEL_SIDE_MARGIN">
            <summary>
            The placeholder label side margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.SHAPE_VIEW_SINGLE_PADDING">
            <summary>
            The default shape view single padding
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.VERTICAL_SLOP">
            <summary>
            The vertical slop
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InvalidBorderViewStyleProperty">
            <summary>
            The invalid border view style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InvalidInstructionsStyleProperty">
            <summary>
            The invalid instructions style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InvalidPlaceholderStyleProperty">
            <summary>
            The invalid placeholder style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ValidBorderViewStyleProperty">
            <summary>
            The valid border view style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ValidInstructionsStyleProperty">
            <summary>
            The valid instructions style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ValidPlaceholderStyleProperty">
            <summary>
            The valid placeholder style property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_BORDER_VIEW_PADDING">
            <summary>
            The default border view padding
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_BORDER_VIEW_BORDER_COLOR">
            <summary>
            The default border view border color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_GRID_PADDING">
            <summary>
            The default grid padding
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_INSTRUCTIONS_LABEL_FONT_SIZE">
            <summary>
            The default instructions label font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_PLACEHOLDER_BACK_COLOR">
            <summary>
            The default placeholder back color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_PLACEHOLDER_LABEL_FONT_SIZE">
            <summary>
            The default placeholder label font size
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_PLACEHOLDER_TEXT_COLOR">
            <summary>
            The default placeholder text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DEFAULT_SHAPE_VIEW_PADDING">
            <summary>
            The default shape view padding
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.INVALID_FONT_ATTRIBUTES">
            <summary>
            The invalid font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.INVALID_TEXT_COLOR">
            <summary>
            The invalid text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.VALID_FONT_ATTRIBUTES">
            <summary>
            The valid font attributes
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.VALID_TEXT_COLOR">
            <summary>
            The valid text color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._bindableProperty">
            <summary>
            The bindable property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._bindingMode">
            <summary>
            The binding mode
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._borderViewHeight">
            <summary>
            The border view height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._converter">
            <summary>
            The converter
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._converterParameter">
            <summary>
            The converter parameter
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._instructions">
            <summary>
            The instructions
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._instructionsHeight">
            <summary>
            The instructions height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._placeholder">
            <summary>
            The placeholder
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._placeholderHeight">
            <summary>
            The placeholder height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._showInstructionsOrValidations">
            <summary>
            The show instructions or validations
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._showValidationErrorsAsInstructions">
            <summary>
            The show validation errors as instructions
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._stringFormat">
            <summary>
            The string format
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._validator">
            <summary>
            The validator
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._viewModelPropertyName">
            <summary>
            The view model property name
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._canvas">
            <summary>
            The canvas
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._invalidBorderViewStyle">
            <summary>
            The invalid border view style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._invalidInstructionsStyle">
            <summary>
            The invalid instructions style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._invalidPlaceholderStyle">
            <summary>
            The invalid placeholder style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._lastBorderViewBounds">
            <summary>
            The last border view bounds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._lastEditableViewContainerBounds">
            <summary>
            The last editable view container bounds
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._placeholderGrid">
            <summary>
            The placeholder grid
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._placeholderLabelHasBeenShown">
            <summary>
            The placeholder label has been shown
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._validBorderViewStyle">
            <summary>
            The valid border view style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._validInstructionsStyle">
            <summary>
            The valid instructions style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._validPlaceholderStyle">
            <summary>
            The valid placeholder style
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase._viewsCreated">
            <summary>
            The views created
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.#ctor(Xamarin.Forms.BindableProperty,System.Nullable{System.Double},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Boolean,System.Boolean,System.String,Com.MarcusTS.SharedForms.Common.Interfaces.ICanBeValid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase" /> class.
            </summary>
            <param name="bindableProperty">The bindable property.</param>
            <param name="borderViewHeight">Height of the border view.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="converter">The converter.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="fontFamilyOverride">The font family override.</param>
            <param name="instructions">The instructions.</param>
            <param name="instructionsHeight">Height of the instructions.</param>
            <param name="placeholder">The placeholder.</param>
            <param name="placeholderHeight">Height of the placeholder.</param>
            <param name="showInstructionsOrValidations">if set to <c>true</c> [show instructions or validations].</param>
            <param name="showValidationErrorsAsInstructions">if set to <c>true</c> [show validation errors as instructions].</param>
            <param name="stringFormat">The string format.</param>
            <param name="validator">The validator.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.DerivedViewIsFocused">
            <summary>
            Gets a value indicating whether [derived view is focused].
            </summary>
            <value><c>true</c> if [derived view is focused]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.EditableView">
            <summary>
            Gets the editable view.
            </summary>
            <value>The editable view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.EditableViewContainer">
            <summary>
            Gets the editable view container.
            </summary>
            <value>The editable view container.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.FontFamilyOverride">
            <summary>
            The font family override
            </summary>
            <value>The font family override.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.UserHasEnteredValidContent">
            <summary>
            Gets a value indicating whether [user has entered valid content].
            </summary>
            <value><c>true</c> if [user has entered valid content]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.BorderView">
            <summary>
            Gets the border view.
            </summary>
            <value>The border view.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CurrentInstructions">
            <summary>
            Gets or sets the current instructions.
            </summary>
            <value>The current instructions.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InstructionsLabel">
            <summary>
            Gets the instructions label.
            </summary>
            <value>The instructions label.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InvalidBorderViewStyle">
            <summary>
            Gets or sets the invalid border view style.
            </summary>
            <value>The invalid border view style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InvalidInstructionsStyle">
            <summary>
            Gets or sets the invalid instructions style.
            </summary>
            <value>The invalid instructions style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.InvalidPlaceholderStyle">
            <summary>
            Gets or sets the invalid placeholder style.
            </summary>
            <value>The invalid placeholder style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.PlaceholderLabel">
            <summary>
            Gets the placeholder label.
            </summary>
            <value>The placeholder label.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ValidBorderViewStyle">
            <summary>
            Gets or sets the valid border view style.
            </summary>
            <value>The valid border view style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ValidInstructionsStyle">
            <summary>
            Gets or sets the valid instructions style.
            </summary>
            <value>The valid instructions style.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ValidPlaceholderStyle">
            <summary>
            Gets or sets the valid placeholder style.
            </summary>
            <value>The valid placeholder style.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CallRevalidate">
            <summary>
            Calls the revalidate.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.SetTabIndexes(System.Int32)">
            <summary>
            Sets the tab indexes.
            </summary>
            <param name="incomingTabIndex">Index of the incoming tab.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateValidatableViewBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase,``0,``0})">
            <summary>
            Creates the validatable entry bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CallCreateViews">
            <summary>
            Calls the create views.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ConsiderLoweringPlaceholder(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Considers the lowering placeholder.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
            <remarks>TODO Cannot avoid async void -- event handler.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateBindings">
            <summary>
            Creates the bindings.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateViews">
            <summary>
            Creates the views.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ReportGlobalFocusAndRaisePlaceholder(System.Object,Xamarin.Forms.FocusEventArgs)">
            <summary>
            Raises the placeholder.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Xamarin.Forms.FocusEventArgs" /> instance containing the event data.</param>
            <remarks>TODO Cannot avoid async void -- event handler.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ResetPlaceholderPosition">
            <summary>
            Resets the placeholder position.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.ResetStyles">
            <summary>
            Resets the styles.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateDefaultBorderViewStyle">
            <summary>
            Creates the default border view style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateDefaultInvalidBorderViewStyle">
            <summary>
            Creates the default invalid border view style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateDefaultInvalidInstructionsStyle">
            <summary>
            Creates the default invalid instructions style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateDefaultInvalidPlaceholderStyle">
            <summary>
            Creates the default invalid placeholder style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateDefaultValidInstructionsStyle">
            <summary>
            Creates the default valid instructions style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateDefaultValidPlaceholderStyle">
            <summary>
            Creates the default valid placeholder style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreateInstructionsStyle(System.Boolean)">
            <summary>
            Creates the instructions style.
            </summary>
            <param name="isValid">if set to <c>true</c> [is valid].</param>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.CreatePlaceholderStyle">
            <summary>
            Creates the placeholder style.
            </summary>
            <returns>Style.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.ValidatableViewBase.HandleIsValidChanged(System.Nullable{System.Boolean})">
            <summary>
            Handles the is valid changed.
            </summary>
            <param name="isValid">if set to <c>true</c> [is valid].</param>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton">
            <summary>
            Interface IWebViewWithCloseButton
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton.CloseCommand">
            <summary>
            Gets or sets the close command.
            </summary>
            <value>The close command.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton.ThemeColor">
            <summary>
            Gets or sets the color of the theme.
            </summary>
            <value>The color of the theme.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton.ThemeFontFamily">
            <summary>
            Gets or sets the theme font family.
            </summary>
            <value>The theme font family.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton.WebUrl">
            <summary>
            Gets or sets the web URL.
            </summary>
            <value>The web URL.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton">
            <summary>
            Class WebViewWithCloseButton.
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.ShapeView" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Controls.IWebViewWithCloseButton" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.CLOSE_BUTTON_IMAGE_PATH">
            <summary>
            The close button image path
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.CLOSE_BUTTON_MARGIN">
            <summary>
            The close button margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.CLOSE_BUTTON_WIDTH_HEIGHT">
            <summary>
            The close button width height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.HEADER_HEIGHT">
            <summary>
            The header height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.WEB_VIEW_PADDING">
            <summary>
            The web view padding
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.CloseCommandProperty">
            <summary>
            The close command property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.ThemeColorProperty">
            <summary>
            The theme color property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.ThemeFontFamilyProperty">
            <summary>
            The theme font family property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.WebUrlProperty">
            <summary>
            The web URL property
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton._webView">
            <summary>
            The web view
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton._themeColor">
            <summary>
            The theme color
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton._webUrl">
            <summary>
            The web URL
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.CloseCommand">
            <summary>
            Gets or sets the close command.
            </summary>
            <value>The close command.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.ThemeColor">
            <summary>
            Gets or sets the color of the theme.
            </summary>
            <value>The color of the theme.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.ThemeFontFamily">
            <summary>
            Gets or sets the theme font family.
            </summary>
            <value>The theme font family.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.WebUrl">
            <summary>
            Gets or sets the web URL.
            </summary>
            <value>The web URL.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.CreateDataAwareFlowableCollectionCanvasBindableProperty``1(System.String,``0,Xamarin.Forms.BindingMode,System.Action{Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton,``0,``0})">
            <summary>
            Creates the data aware flowable collection canvas bindable property.
            </summary>
            <typeparam name="PropertyTypeT">The type of the property type t.</typeparam>
            <param name="localPropName">Name of the local property.</param>
            <param name="defaultVal">The default value.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="callbackAction">The callback action.</param>
            <returns>BindableProperty.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Controls.WebViewWithCloseButton.ApplyThemeColor">
            <summary>
            Applies the color of the theme.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.YesNo">
            <summary>
            Enum YesNo
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.YesNo.No">
            <summary>
            The no
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Controls.YesNo.Yes">
            <summary>
            The yes
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.IYesNoToggleImageLabelButton">
            <summary>
            Interface IYesNoToggleImageLabelButton
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton&lt;Com.MarcusTS.SharedForms.Views.Controls.YesNo&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Views.Controls.IEnumToggleImageLabelButton&lt;Com.MarcusTS.SharedForms.Views.Controls.YesNo&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Controls.YesNoToggleImageLabelButton">
            <summary>
            Class YesNoToggleImageLabelButton.
            Implements the <see cref="!:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase&lt;Com.MarcusTS.SharedForms.Views.Controls.YesNo&gt;" />
            </summary>
            <seealso cref="!:Com.MarcusTS.SharedForms.Views.Controls.EnumToggleImageLabelButtonBase&lt;Com.MarcusTS.SharedForms.Views.Controls.YesNo&gt;" />
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Pages.ITypeSafeViewBase">
            <summary>
            Interface ITypeSafeViewBase
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1">
            <summary>
            A base class for content views that protects the type safety of the binding context.
            Implements the <see cref="T:Xamarin.Forms.ContentView" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.Pages.ITypeSafeViewBase" />
            </summary>
            <typeparam name="InterfaceT">The required interface for this view.</typeparam>
            <seealso cref="T:Xamarin.Forms.ContentView" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.Pages.ITypeSafeViewBase" />
            <remarks>This code is similar to that at <see cref="!:TypeSafePageBase&lt;InterfaceT&gt;" /> except it manages a
            view rather than a page.</remarks>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1._contentRelativeLayout">
            <summary>
            The content relative layout
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1.#ctor(Com.MarcusTS.SharedForms.Common.Interfaces.IProvidePageEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1" /> class.
            </summary>
            <param name="pageEventProvider">The page event provider.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1.BindingContext">
            <summary>
            T is normally an interface -- not a class -- but there is no such constraint available.
            </summary>
            <value>An <see cref="T:System.Object" /> that contains the properties that will be targeted by the bound properties
            that belong to this <see cref="T:Xamarin.Forms.BindableObject" />. This is a bindable property.</value>
            <remarks><block subset="none" type="note">Typically, the runtime performance is better if  <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty,Xamarin.Forms.BindingBase)" /> have been made.</block>
            <para>The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):</para>
            <example>
              <code lang="csharp lang-csharp"><![CDATA[
            var label = new Label ();
            label.SetBinding (Label.TextProperty, "Name");
            label.BindingContext = new {Name = "John Doe", Company = "Xamarin"};
            Debug.WriteLine (label.Text); //prints "John Doe"
            ]]></code>
            </example></remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1.AfterContentSet(Xamarin.Forms.RelativeLayout)">
            <summary>
            Afters the content set.
            </summary>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.Pages.TypeSafeViewBase`1.ConstructView">
            <summary>
            Requests that the deriver create the physical view.
            </summary>
            <returns>View.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.SubViews.IMainMenu">
            <summary>
            Interface IMainMenu
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.SubViews.IMainMenu.IsMenuLoaded">
            <summary>
            Gets a value indicating whether this instance is menu loaded.
            </summary>
            <value><c>true</c> if this instance is menu loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.SubViews.IMainMenu.MenuHeight">
            <summary>
            Gets the height of the menu.
            </summary>
            <value>The height of the menu.</value>
        </member>
        <member name="T:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu">
            <summary>
            Class MainMenu.
            Implements the <see cref="T:Xamarin.Forms.ContentView" />
            Implements the <see cref="T:Com.MarcusTS.SharedForms.Views.SubViews.IMainMenu" />
            </summary>
            <seealso cref="T:Xamarin.Forms.ContentView" />
            <seealso cref="T:Com.MarcusTS.SharedForms.Views.SubViews.IMainMenu" />
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.ALLOW_EVENT_TUNNELING">
            <summary>
            The allow event tunneling
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.A_MENU_ITEM_WIDTH">
            <summary>
            The menu item width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.D_MENU_OUTSIDE_SINGLE_MARGIN">
            <summary>
            The menu outside single margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.E_MENU_GROSS_WIDTH">
            <summary>
            The menu gross width
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.F_MENU_OUTSIDE_MARGIN">
            <summary>
            The menu outside margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.G_MENU_INSIDE_SINGLE_MARGIN">
            <summary>
            The menu inside single margin
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.MAIN_MENU_OPACITY">
            <summary>
            The main menu opacity
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.MENU_ITEM_HEIGHT">
            <summary>
            The menu item height
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu._stateMachine">
            <summary>
            The state machine
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu._isMenuLoaded">
            <summary>
            The is menu loaded
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.#ctor(Com.MarcusTS.SharedForms.Common.Navigation.IStateMachine)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu" /> class.
            </summary>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.IsMenuLoaded">
            <summary>
            Gets a value indicating whether this instance is menu loaded.
            </summary>
            <value><c>true</c> if this instance is menu loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.MenuHeight">
            <summary>
            Gets the height of the menu.
            </summary>
            <value>The height of the menu.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.CreateMenuItemButton(Com.MarcusTS.SharedForms.Common.Interfaces.IMenuNavigationState)">
            <summary>
            Creates the menu item button.
            </summary>
            <param name="menuData">The menu data.</param>
            <returns>Button.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedForms.Views.SubViews.MainMenu.LoadMenuFromStateMachine">
            <summary>
            Loads the menu from state machine.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Navigation.INoPayload">
            <summary>
            Interface INoPayload
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Navigation.NoPayload">
            <summary>
            Class NoPayload.
            Implements the <see cref="T:Com.MarcusTS.SharedUtils.Navigation.INoPayload" />
            Implements the <see cref="T:Com.MarcusTS.SharedUtils.Navigation.INoPayload" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedUtils.Navigation.INoPayload" />
            <seealso cref="T:Com.MarcusTS.SharedUtils.Navigation.INoPayload" />
        </member>
    </members>
</doc>
